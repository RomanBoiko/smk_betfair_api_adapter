##################################################
# file: BFGlobalService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/local/bin/wsdl2py BFGlobalService.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://www.betfair.com/publicapi/v3/BFGlobalService/
##############################

class ns1:
    targetNamespace = "http://www.betfair.com/publicapi/v3/BFGlobalService/"

    class login_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "login"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.login_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","LoginReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","login")
            kw["aname"] = "_login"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "login_Holder"
            self.pyclass = Holder

    class loginResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "loginResponse"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.loginResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","LoginResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","loginResponse")
            kw["aname"] = "_loginResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "loginResponse_Holder"
            self.pyclass = Holder

    class retrieveLIMBMessage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "retrieveLIMBMessage"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.retrieveLIMBMessage_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","RetrieveLIMBMessageReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","retrieveLIMBMessage")
            kw["aname"] = "_retrieveLIMBMessage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "retrieveLIMBMessage_Holder"
            self.pyclass = Holder

    class retrieveLIMBMessageResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "retrieveLIMBMessageResponse"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.retrieveLIMBMessageResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","RetrieveLIMBMessageResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","retrieveLIMBMessageResponse")
            kw["aname"] = "_retrieveLIMBMessageResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "retrieveLIMBMessageResponse_Holder"
            self.pyclass = Holder

    class submitLIMBMessage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "submitLIMBMessage"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.submitLIMBMessage_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","SubmitLIMBMessageReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","submitLIMBMessage")
            kw["aname"] = "_submitLIMBMessage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "submitLIMBMessage_Holder"
            self.pyclass = Holder

    class submitLIMBMessageResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "submitLIMBMessageResponse"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.submitLIMBMessageResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","SubmitLIMBMessageResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","submitLIMBMessageResponse")
            kw["aname"] = "_submitLIMBMessageResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "submitLIMBMessageResponse_Holder"
            self.pyclass = Holder

    class logout_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "logout"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.logout_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","LogoutReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","logout")
            kw["aname"] = "_logout"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "logout_Holder"
            self.pyclass = Holder

    class logoutResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "logoutResponse"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.logoutResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","LogoutResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","logoutResponse")
            kw["aname"] = "_logoutResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "logoutResponse_Holder"
            self.pyclass = Holder

    class keepAlive_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "keepAlive"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.keepAlive_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","KeepAliveReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","keepAlive")
            kw["aname"] = "_keepAlive"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "keepAlive_Holder"
            self.pyclass = Holder

    class keepAliveResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "keepAliveResponse"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.keepAliveResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","KeepAliveResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","keepAliveResponse")
            kw["aname"] = "_keepAliveResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "keepAliveResponse_Holder"
            self.pyclass = Holder

    class getEvents_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getEvents"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.getEvents_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","GetEventsReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","getEvents")
            kw["aname"] = "_getEvents"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getEvents_Holder"
            self.pyclass = Holder

    class getEventsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getEventsResponse"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.getEventsResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","GetEventsResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","getEventsResponse")
            kw["aname"] = "_getEventsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getEventsResponse_Holder"
            self.pyclass = Holder

    class getActiveEventTypes_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getActiveEventTypes"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.getActiveEventTypes_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","GetEventTypesReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","getActiveEventTypes")
            kw["aname"] = "_getActiveEventTypes"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getActiveEventTypes_Holder"
            self.pyclass = Holder

    class getActiveEventTypesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getActiveEventTypesResponse"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.getActiveEventTypesResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","GetEventTypesResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","getActiveEventTypesResponse")
            kw["aname"] = "_getActiveEventTypesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getActiveEventTypesResponse_Holder"
            self.pyclass = Holder

    class getAllEventTypes_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAllEventTypes"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.getAllEventTypes_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","GetEventTypesReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","getAllEventTypes")
            kw["aname"] = "_getAllEventTypes"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getAllEventTypes_Holder"
            self.pyclass = Holder

    class getAllEventTypesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAllEventTypesResponse"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.getAllEventTypesResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","GetEventTypesResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","getAllEventTypesResponse")
            kw["aname"] = "_getAllEventTypesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getAllEventTypesResponse_Holder"
            self.pyclass = Holder

    class getSubscriptionInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getSubscriptionInfo"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.getSubscriptionInfo_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","GetSubscriptionInfoReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","getSubscriptionInfo")
            kw["aname"] = "_getSubscriptionInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getSubscriptionInfo_Holder"
            self.pyclass = Holder

    class getSubscriptionInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getSubscriptionInfoResponse"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.getSubscriptionInfoResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","GetSubscriptionInfoResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","getSubscriptionInfoResponse")
            kw["aname"] = "_getSubscriptionInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getSubscriptionInfoResponse_Holder"
            self.pyclass = Holder

    class depositFromPaymentCard_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "depositFromPaymentCard"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.depositFromPaymentCard_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","DepositFromPaymentCardReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","depositFromPaymentCard")
            kw["aname"] = "_depositFromPaymentCard"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "depositFromPaymentCard_Holder"
            self.pyclass = Holder

    class depositFromPaymentCardResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "depositFromPaymentCardResponse"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.depositFromPaymentCardResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","DepositFromPaymentCardResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","depositFromPaymentCardResponse")
            kw["aname"] = "_depositFromPaymentCardResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "depositFromPaymentCardResponse_Holder"
            self.pyclass = Holder

    class addPaymentCard_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "addPaymentCard"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.addPaymentCard_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","AddPaymentCardReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","addPaymentCard")
            kw["aname"] = "_addPaymentCard"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "addPaymentCard_Holder"
            self.pyclass = Holder

    class addPaymentCardResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "addPaymentCardResponse"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.addPaymentCardResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","AddPaymentCardResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","addPaymentCardResponse")
            kw["aname"] = "_addPaymentCardResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "addPaymentCardResponse_Holder"
            self.pyclass = Holder

    class deletePaymentCard_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deletePaymentCard"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.deletePaymentCard_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","DeletePaymentCardReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","deletePaymentCard")
            kw["aname"] = "_deletePaymentCard"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "deletePaymentCard_Holder"
            self.pyclass = Holder

    class deletePaymentCardResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deletePaymentCardResponse"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.deletePaymentCardResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","DeletePaymentCardResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","deletePaymentCardResponse")
            kw["aname"] = "_deletePaymentCardResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "deletePaymentCardResponse_Holder"
            self.pyclass = Holder

    class updatePaymentCard_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "updatePaymentCard"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.updatePaymentCard_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","UpdatePaymentCardReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","updatePaymentCard")
            kw["aname"] = "_updatePaymentCard"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "updatePaymentCard_Holder"
            self.pyclass = Holder

    class updatePaymentCardResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "updatePaymentCardResponse"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.updatePaymentCardResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","UpdatePaymentCardResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","updatePaymentCardResponse")
            kw["aname"] = "_updatePaymentCardResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "updatePaymentCardResponse_Holder"
            self.pyclass = Holder

    class getPaymentCard_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getPaymentCard"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.getPaymentCard_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","GetPaymentCardReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","getPaymentCard")
            kw["aname"] = "_getPaymentCard"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getPaymentCard_Holder"
            self.pyclass = Holder

    class getPaymentCardResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getPaymentCardResponse"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.getPaymentCardResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","GetPaymentCardResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","getPaymentCardResponse")
            kw["aname"] = "_getPaymentCardResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getPaymentCardResponse_Holder"
            self.pyclass = Holder

    class withdrawToPaymentCard_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "withdrawToPaymentCard"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.withdrawToPaymentCard_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","WithdrawToPaymentCardReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","withdrawToPaymentCard")
            kw["aname"] = "_withdrawToPaymentCard"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "withdrawToPaymentCard_Holder"
            self.pyclass = Holder

    class withdrawToPaymentCardResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "withdrawToPaymentCardResponse"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.withdrawToPaymentCardResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","WithdrawToPaymentCardResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","withdrawToPaymentCardResponse")
            kw["aname"] = "_withdrawToPaymentCardResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "withdrawToPaymentCardResponse_Holder"
            self.pyclass = Holder

    class selfExclude_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "selfExclude"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.selfExclude_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","SelfExcludeReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","selfExclude")
            kw["aname"] = "_selfExclude"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "selfExclude_Holder"
            self.pyclass = Holder

    class selfExcludeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "selfExcludeResponse"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.selfExcludeResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","SelfExcludeResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","selfExcludeResponse")
            kw["aname"] = "_selfExcludeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "selfExcludeResponse_Holder"
            self.pyclass = Holder

    class convertCurrency_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "convertCurrency"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.convertCurrency_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","ConvertCurrencyReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","convertCurrency")
            kw["aname"] = "_convertCurrency"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "convertCurrency_Holder"
            self.pyclass = Holder

    class convertCurrencyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "convertCurrencyResponse"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.convertCurrencyResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","ConvertCurrencyResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","convertCurrencyResponse")
            kw["aname"] = "_convertCurrencyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "convertCurrencyResponse_Holder"
            self.pyclass = Holder

    class getAllCurrencies_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAllCurrencies"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.getAllCurrencies_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","GetCurrenciesReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","getAllCurrencies")
            kw["aname"] = "_getAllCurrencies"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getAllCurrencies_Holder"
            self.pyclass = Holder

    class getAllCurrenciesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAllCurrenciesResponse"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.getAllCurrenciesResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","GetCurrenciesResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","getAllCurrenciesResponse")
            kw["aname"] = "_getAllCurrenciesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getAllCurrenciesResponse_Holder"
            self.pyclass = Holder

    class getAllCurrenciesV2_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAllCurrenciesV2"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.getAllCurrenciesV2_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","GetCurrenciesV2Req",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","getAllCurrenciesV2")
            kw["aname"] = "_getAllCurrenciesV2"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getAllCurrenciesV2_Holder"
            self.pyclass = Holder

    class getAllCurrenciesV2Response_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAllCurrenciesV2Response"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.getAllCurrenciesV2Response_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","GetCurrenciesV2Resp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","getAllCurrenciesV2Response")
            kw["aname"] = "_getAllCurrenciesV2Response"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getAllCurrenciesV2Response_Holder"
            self.pyclass = Holder

    class viewReferAndEarn_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "viewReferAndEarn"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.viewReferAndEarn_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","ViewReferAndEarnReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","viewReferAndEarn")
            kw["aname"] = "_viewReferAndEarn"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "viewReferAndEarn_Holder"
            self.pyclass = Holder

    class viewReferAndEarnResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "viewReferAndEarnResponse"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.viewReferAndEarnResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","ViewReferAndEarnResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","viewReferAndEarnResponse")
            kw["aname"] = "_viewReferAndEarnResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "viewReferAndEarnResponse_Holder"
            self.pyclass = Holder

    class viewProfile_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "viewProfile"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.viewProfile_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","ViewProfileReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","viewProfile")
            kw["aname"] = "_viewProfile"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "viewProfile_Holder"
            self.pyclass = Holder

    class viewProfileResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "viewProfileResponse"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.viewProfileResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","ViewProfileResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","viewProfileResponse")
            kw["aname"] = "_viewProfileResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "viewProfileResponse_Holder"
            self.pyclass = Holder

    class withdrawByBankTransfer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "withdrawByBankTransfer"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.withdrawByBankTransfer_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","WithdrawByBankTransferReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","withdrawByBankTransfer")
            kw["aname"] = "_withdrawByBankTransfer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "withdrawByBankTransfer_Holder"
            self.pyclass = Holder

    class withdrawByBankTransferResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "withdrawByBankTransferResponse"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.withdrawByBankTransferResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","WithdrawByBankTransferResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","withdrawByBankTransferResponse")
            kw["aname"] = "_withdrawByBankTransferResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "withdrawByBankTransferResponse_Holder"
            self.pyclass = Holder

    class viewProfileV2_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "viewProfileV2"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.viewProfileV2_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","ViewProfileV2Req",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","viewProfileV2")
            kw["aname"] = "_viewProfileV2"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "viewProfileV2_Holder"
            self.pyclass = Holder

    class viewProfileV2Response_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "viewProfileV2Response"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.viewProfileV2Response_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","ViewProfileV2Resp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","viewProfileV2Response")
            kw["aname"] = "_viewProfileV2Response"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "viewProfileV2Response_Holder"
            self.pyclass = Holder

    class modifyProfile_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "modifyProfile"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.modifyProfile_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","ModifyProfileReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","modifyProfile")
            kw["aname"] = "_modifyProfile"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "modifyProfile_Holder"
            self.pyclass = Holder

    class modifyProfileResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "modifyProfileResponse"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.modifyProfileResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","ModifyProfileResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","modifyProfileResponse")
            kw["aname"] = "_modifyProfileResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "modifyProfileResponse_Holder"
            self.pyclass = Holder

    class createAccount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "createAccount"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.createAccount_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","CreateAccountReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","createAccount")
            kw["aname"] = "_createAccount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "createAccount_Holder"
            self.pyclass = Holder

    class createAccountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "createAccountResponse"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.createAccountResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","CreateAccountResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","createAccountResponse")
            kw["aname"] = "_createAccountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "createAccountResponse_Holder"
            self.pyclass = Holder

    class forgotPassword_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "forgotPassword"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.forgotPassword_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","ForgotPasswordReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","forgotPassword")
            kw["aname"] = "_forgotPassword"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "forgotPassword_Holder"
            self.pyclass = Holder

    class forgotPasswordResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "forgotPasswordResponse"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.forgotPasswordResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","ForgotPasswordResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","forgotPasswordResponse")
            kw["aname"] = "_forgotPasswordResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "forgotPasswordResponse_Holder"
            self.pyclass = Holder

    class modifyPassword_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "modifyPassword"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.modifyPassword_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","ModifyPasswordReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","modifyPassword")
            kw["aname"] = "_modifyPassword"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "modifyPassword_Holder"
            self.pyclass = Holder

    class modifyPasswordResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "modifyPasswordResponse"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.modifyPasswordResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","ModifyPasswordResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","modifyPasswordResponse")
            kw["aname"] = "_modifyPasswordResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "modifyPasswordResponse_Holder"
            self.pyclass = Holder

    class setChatName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "setChatName"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.setChatName_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","SetChatNameReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","setChatName")
            kw["aname"] = "_setChatName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "setChatName_Holder"
            self.pyclass = Holder

    class setChatNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "setChatNameResponse"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.setChatNameResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","SetChatNameResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","setChatNameResponse")
            kw["aname"] = "_setChatNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "setChatNameResponse_Holder"
            self.pyclass = Holder

    class transferFunds_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "transferFunds"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.transferFunds_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","TransferFundsReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","transferFunds")
            kw["aname"] = "_transferFunds"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "transferFunds_Holder"
            self.pyclass = Holder

    class transferFundsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "transferFundsResponse"
        schema = "http://www.betfair.com/publicapi/v3/BFGlobalService/"
        def __init__(self, **kw):
            ns = ns1.transferFundsResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","TransferFundsResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v3/BFGlobalService/","transferFundsResponse")
            kw["aname"] = "_transferFundsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "transferFundsResponse_Holder"
            self.pyclass = Holder

# end class ns1 (tns: http://www.betfair.com/publicapi/v3/BFGlobalService/)

##############################
# targetNamespace
# http://www.betfair.com/publicapi/types/global/v3/
##############################

class ns0:
    targetNamespace = "http://www.betfair.com/publicapi/types/global/v3/"

    class LoginResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "LoginResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.LoginResp_Def.schema
            TClist = [ZSI.TC.String(pname="currency", aname="_currency", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","LoginErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="validUntil", aname="_validUntil", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIResponse_Def not in ns0.LoginResp_Def.__bases__:
                bases = list(ns0.LoginResp_Def.__bases__)
                bases.insert(0, ns0.APIResponse_Def)
                ns0.LoginResp_Def.__bases__ = tuple(bases)

            ns0.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class APIResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "APIResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.APIResponse_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","APIResponseHeader",lazy=False)(pname="header", aname="_header", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._header = None
                    return
            Holder.__name__ = "APIResponse_Holder"
            self.pyclass = Holder

    class APIResponseHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "APIResponseHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.APIResponseHeader_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","APIErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sessionToken", aname="_sessionToken", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="timestamp", aname="_timestamp", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._errorCode = None
                    self._minorErrorCode = None
                    self._sessionToken = None
                    self._timestamp = None
                    return
            Holder.__name__ = "APIResponseHeader_Holder"
            self.pyclass = Holder

    class APIErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "APIErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LoginErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "LoginErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LoginReq_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "LoginReq")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.LoginReq_Def.schema
            TClist = [ZSI.TC.String(pname="ipAddress", aname="_ipAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="locationId", aname="_locationId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="productId", aname="_productId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="username", aname="_username", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="vendorSoftwareId", aname="_vendorSoftwareId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ipAddress = None
                    self._locationId = None
                    self._password = None
                    self._productId = None
                    self._username = None
                    self._vendorSoftwareId = None
                    return
            Holder.__name__ = "LoginReq_Holder"
            self.pyclass = Holder

    class RetrieveLIMBMessageReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "RetrieveLIMBMessageReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RetrieveLIMBMessageReq_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIRequest_Def not in ns0.RetrieveLIMBMessageReq_Def.__bases__:
                bases = list(ns0.RetrieveLIMBMessageReq_Def.__bases__)
                bases.insert(0, ns0.APIRequest_Def)
                ns0.RetrieveLIMBMessageReq_Def.__bases__ = tuple(bases)

            ns0.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RetrieveLIMBMessageResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "RetrieveLIMBMessageResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RetrieveLIMBMessageResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","RetrieveLIMBMessageErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="totalMessagesCount", aname="_totalMessagesCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","RetrievePersonalLIMBMessage",lazy=False)(pname="retrievePersonalMessage", aname="_retrievePersonalMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","RetrieveTCPrivacyPolicyChangeLIMBMessage",lazy=False)(pname="retrieveTCPrivacyPolicyChangeMessage", aname="_retrieveTCPrivacyPolicyChangeMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","RetrievePasswordChangeLIMBMessage",lazy=False)(pname="retrievePasswordChangeMessage", aname="_retrievePasswordChangeMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","RetrieveBirthDateCheckLIMBMessage",lazy=False)(pname="retrieveBirthDateCheckMessage", aname="_retrieveBirthDateCheckMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","RetrieveAddressCheckLIMBMessage",lazy=False)(pname="retrieveAddressCheckMessage", aname="_retrieveAddressCheckMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","RetrieveContactDetailsCheckLIMBMessage",lazy=False)(pname="retrieveContactDetailsCheckMessage", aname="_retrieveContactDetailsCheckMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","RetrieveChatNameChangeLIMBMessage",lazy=False)(pname="retrieveChatNameChangeMessage", aname="_retrieveChatNameChangeMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","ArrayOfRetrieveCardBillingAddressCheckLIMBMessage",lazy=False)(pname="retrieveCardBillingAddressCheckItems", aname="_retrieveCardBillingAddressCheckItems", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIResponse_Def not in ns0.RetrieveLIMBMessageResp_Def.__bases__:
                bases = list(ns0.RetrieveLIMBMessageResp_Def.__bases__)
                bases.insert(0, ns0.APIResponse_Def)
                ns0.RetrieveLIMBMessageResp_Def.__bases__ = tuple(bases)

            ns0.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RetrieveLIMBMessageErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "RetrieveLIMBMessageErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RetrievePersonalLIMBMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "RetrievePersonalLIMBMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RetrievePersonalLIMBMessage_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="messageId", aname="_messageId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="enforceDate", aname="_enforceDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="indicator", aname="_indicator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._messageId = None
                    self._enforceDate = None
                    self._indicator = None
                    self._message = None
                    return
            Holder.__name__ = "RetrievePersonalLIMBMessage_Holder"
            self.pyclass = Holder

    class RetrieveTCPrivacyPolicyChangeLIMBMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "RetrieveTCPrivacyPolicyChangeLIMBMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RetrieveTCPrivacyPolicyChangeLIMBMessage_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="messageId", aname="_messageId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="enforceDate", aname="_enforceDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="indicator", aname="_indicator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reasonForChange", aname="_reasonForChange", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._messageId = None
                    self._enforceDate = None
                    self._indicator = None
                    self._reasonForChange = None
                    return
            Holder.__name__ = "RetrieveTCPrivacyPolicyChangeLIMBMessage_Holder"
            self.pyclass = Holder

    class RetrievePasswordChangeLIMBMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "RetrievePasswordChangeLIMBMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RetrievePasswordChangeLIMBMessage_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="messageId", aname="_messageId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="enforceDate", aname="_enforceDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="indicator", aname="_indicator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._messageId = None
                    self._enforceDate = None
                    self._indicator = None
                    return
            Holder.__name__ = "RetrievePasswordChangeLIMBMessage_Holder"
            self.pyclass = Holder

    class RetrieveBirthDateCheckLIMBMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "RetrieveBirthDateCheckLIMBMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RetrieveBirthDateCheckLIMBMessage_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="messageId", aname="_messageId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="enforceDate", aname="_enforceDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="indicator", aname="_indicator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="birthDate", aname="_birthDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._messageId = None
                    self._enforceDate = None
                    self._indicator = None
                    self._birthDate = None
                    return
            Holder.__name__ = "RetrieveBirthDateCheckLIMBMessage_Holder"
            self.pyclass = Holder

    class RetrieveAddressCheckLIMBMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "RetrieveAddressCheckLIMBMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RetrieveAddressCheckLIMBMessage_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="messageId", aname="_messageId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="enforceDate", aname="_enforceDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="indicator", aname="_indicator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address1", aname="_address1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address2", aname="_address2", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address3", aname="_address3", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="town", aname="_town", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="county", aname="_county", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="zipCode", aname="_zipCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="country", aname="_country", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._messageId = None
                    self._enforceDate = None
                    self._indicator = None
                    self._address1 = None
                    self._address2 = None
                    self._address3 = None
                    self._town = None
                    self._county = None
                    self._zipCode = None
                    self._country = None
                    return
            Holder.__name__ = "RetrieveAddressCheckLIMBMessage_Holder"
            self.pyclass = Holder

    class RetrieveContactDetailsCheckLIMBMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "RetrieveContactDetailsCheckLIMBMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RetrieveContactDetailsCheckLIMBMessage_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="messageId", aname="_messageId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="enforceDate", aname="_enforceDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="indicator", aname="_indicator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="homeTelephone", aname="_homeTelephone", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="workTelephone", aname="_workTelephone", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mobileTelephone", aname="_mobileTelephone", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="emailAddress", aname="_emailAddress", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._messageId = None
                    self._enforceDate = None
                    self._indicator = None
                    self._homeTelephone = None
                    self._workTelephone = None
                    self._mobileTelephone = None
                    self._emailAddress = None
                    return
            Holder.__name__ = "RetrieveContactDetailsCheckLIMBMessage_Holder"
            self.pyclass = Holder

    class RetrieveChatNameChangeLIMBMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "RetrieveChatNameChangeLIMBMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RetrieveChatNameChangeLIMBMessage_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="messageId", aname="_messageId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="enforceDate", aname="_enforceDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="indicator", aname="_indicator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="chatName", aname="_chatName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._messageId = None
                    self._enforceDate = None
                    self._indicator = None
                    self._chatName = None
                    return
            Holder.__name__ = "RetrieveChatNameChangeLIMBMessage_Holder"
            self.pyclass = Holder

    class ArrayOfRetrieveCardBillingAddressCheckLIMBMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ArrayOfRetrieveCardBillingAddressCheckLIMBMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfRetrieveCardBillingAddressCheckLIMBMessage_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","RetrieveCardBillingAddressCheckLIMBMessage",lazy=False)(pname=(ns,"retrieveCardBillingAddressCheckLIMBMessage"), aname="_retrieveCardBillingAddressCheckLIMBMessage", minOccurs=0, maxOccurs=3, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._retrieveCardBillingAddressCheckLIMBMessage = []
                    return
            Holder.__name__ = "ArrayOfRetrieveCardBillingAddressCheckLIMBMessage_Holder"
            self.pyclass = Holder

    class RetrieveCardBillingAddressCheckLIMBMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "RetrieveCardBillingAddressCheckLIMBMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RetrieveCardBillingAddressCheckLIMBMessage_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="messageId", aname="_messageId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="enforceDate", aname="_enforceDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="indicator", aname="_indicator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nickName", aname="_nickName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cardShortNumber", aname="_cardShortNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address1", aname="_address1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address2", aname="_address2", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address3", aname="_address3", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="town", aname="_town", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="county", aname="_county", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="zipCode", aname="_zipCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="country", aname="_country", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._messageId = None
                    self._enforceDate = None
                    self._indicator = None
                    self._nickName = None
                    self._cardShortNumber = None
                    self._address1 = None
                    self._address2 = None
                    self._address3 = None
                    self._town = None
                    self._county = None
                    self._zipCode = None
                    self._country = None
                    return
            Holder.__name__ = "RetrieveCardBillingAddressCheckLIMBMessage_Holder"
            self.pyclass = Holder

    class SubmitLIMBMessageReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "SubmitLIMBMessageReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.SubmitLIMBMessageReq_Def.schema
            TClist = [ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","SubmitPersonalLIMBMessage",lazy=False)(pname="submitPersonalMessage", aname="_submitPersonalMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","SubmitTCPrivacyPolicyChangeLIMBMessage",lazy=False)(pname="submitTCPrivacyPolicyChangeMessage", aname="_submitTCPrivacyPolicyChangeMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","SubmitPasswordChangeLIMBMessage",lazy=False)(pname="submitPasswordChangeMessage", aname="_submitPasswordChangeMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","SubmitBirthDateCheckLIMBMessage",lazy=False)(pname="submitBirthDateCheckMessage", aname="_submitBirthDateCheckMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","SubmitAddressCheckLIMBMessage",lazy=False)(pname="submitAddressCheckMessage", aname="_submitAddressCheckMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","SubmitContactDetailsCheckLIMBMessage",lazy=False)(pname="submitContactDetailsCheckMessage", aname="_submitContactDetailsCheckMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","SubmitChatNameChangeLIMBMessage",lazy=False)(pname="submitChatNameChangeMessage", aname="_submitChatNameChangeMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","ArrayOfSubmitCardBillingAddressCheckLIMBMessage",lazy=False)(pname="submitCardBillingAddressCheckItems", aname="_submitCardBillingAddressCheckItems", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIRequest_Def not in ns0.SubmitLIMBMessageReq_Def.__bases__:
                bases = list(ns0.SubmitLIMBMessageReq_Def.__bases__)
                bases.insert(0, ns0.APIRequest_Def)
                ns0.SubmitLIMBMessageReq_Def.__bases__ = tuple(bases)

            ns0.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SubmitPersonalLIMBMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "SubmitPersonalLIMBMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SubmitPersonalLIMBMessage_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="messageId", aname="_messageId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="acknowledgment", aname="_acknowledgment", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._messageId = None
                    self._acknowledgment = None
                    return
            Holder.__name__ = "SubmitPersonalLIMBMessage_Holder"
            self.pyclass = Holder

    class SubmitTCPrivacyPolicyChangeLIMBMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "SubmitTCPrivacyPolicyChangeLIMBMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SubmitTCPrivacyPolicyChangeLIMBMessage_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","PrivacyPolicyChangeResponseEnum",lazy=False)(pname="tCPrivacyPolicyChangeAcceptance", aname="_tCPrivacyPolicyChangeAcceptance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._tCPrivacyPolicyChangeAcceptance = None
                    return
            Holder.__name__ = "SubmitTCPrivacyPolicyChangeLIMBMessage_Holder"
            self.pyclass = Holder

    class PrivacyPolicyChangeResponseEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "PrivacyPolicyChangeResponseEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SubmitPasswordChangeLIMBMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "SubmitPasswordChangeLIMBMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SubmitPasswordChangeLIMBMessage_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="messageId", aname="_messageId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newPassword", aname="_newPassword", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newPasswordRepeat", aname="_newPasswordRepeat", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._messageId = None
                    self._newPassword = None
                    self._newPasswordRepeat = None
                    return
            Holder.__name__ = "SubmitPasswordChangeLIMBMessage_Holder"
            self.pyclass = Holder

    class SubmitBirthDateCheckLIMBMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "SubmitBirthDateCheckLIMBMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SubmitBirthDateCheckLIMBMessage_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="messageId", aname="_messageId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="detailsCorrect", aname="_detailsCorrect", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="correctBirthDate", aname="_correctBirthDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._messageId = None
                    self._detailsCorrect = None
                    self._correctBirthDate = None
                    return
            Holder.__name__ = "SubmitBirthDateCheckLIMBMessage_Holder"
            self.pyclass = Holder

    class SubmitAddressCheckLIMBMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "SubmitAddressCheckLIMBMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SubmitAddressCheckLIMBMessage_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="messageId", aname="_messageId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="detailsCorrect", aname="_detailsCorrect", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newAddress1", aname="_newAddress1", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newAddress2", aname="_newAddress2", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newAddress3", aname="_newAddress3", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newTown", aname="_newTown", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newCounty", aname="_newCounty", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newZipCode", aname="_newZipCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newCountry", aname="_newCountry", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._messageId = None
                    self._detailsCorrect = None
                    self._newAddress1 = None
                    self._newAddress2 = None
                    self._newAddress3 = None
                    self._newTown = None
                    self._newCounty = None
                    self._newZipCode = None
                    self._newCountry = None
                    return
            Holder.__name__ = "SubmitAddressCheckLIMBMessage_Holder"
            self.pyclass = Holder

    class SubmitContactDetailsCheckLIMBMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "SubmitContactDetailsCheckLIMBMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SubmitContactDetailsCheckLIMBMessage_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="messageId", aname="_messageId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="detailsCorrect", aname="_detailsCorrect", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newHomeTelephone", aname="_newHomeTelephone", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newWorkTelephone", aname="_newWorkTelephone", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newMobileTelephone", aname="_newMobileTelephone", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newEmailAddress", aname="_newEmailAddress", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._messageId = None
                    self._detailsCorrect = None
                    self._newHomeTelephone = None
                    self._newWorkTelephone = None
                    self._newMobileTelephone = None
                    self._newEmailAddress = None
                    return
            Holder.__name__ = "SubmitContactDetailsCheckLIMBMessage_Holder"
            self.pyclass = Holder

    class SubmitChatNameChangeLIMBMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "SubmitChatNameChangeLIMBMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SubmitChatNameChangeLIMBMessage_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="messageId", aname="_messageId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newChatName", aname="_newChatName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._messageId = None
                    self._newChatName = None
                    return
            Holder.__name__ = "SubmitChatNameChangeLIMBMessage_Holder"
            self.pyclass = Holder

    class ArrayOfSubmitCardBillingAddressCheckLIMBMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ArrayOfSubmitCardBillingAddressCheckLIMBMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfSubmitCardBillingAddressCheckLIMBMessage_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","SubmitCardBillingAddressCheckLIMBMessage",lazy=False)(pname=(ns,"submitCardBillingAddressCheckLIMBMessage"), aname="_submitCardBillingAddressCheckLIMBMessage", minOccurs=0, maxOccurs=3, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._submitCardBillingAddressCheckLIMBMessage = []
                    return
            Holder.__name__ = "ArrayOfSubmitCardBillingAddressCheckLIMBMessage_Holder"
            self.pyclass = Holder

    class SubmitCardBillingAddressCheckLIMBMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "SubmitCardBillingAddressCheckLIMBMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SubmitCardBillingAddressCheckLIMBMessage_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="messageId", aname="_messageId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="detailsCorrect", aname="_detailsCorrect", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nickName", aname="_nickName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newAddress1", aname="_newAddress1", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newAddress2", aname="_newAddress2", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newAddress3", aname="_newAddress3", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newTown", aname="_newTown", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newCounty", aname="_newCounty", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newZipCode", aname="_newZipCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newCountry", aname="_newCountry", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._messageId = None
                    self._detailsCorrect = None
                    self._nickName = None
                    self._newAddress1 = None
                    self._newAddress2 = None
                    self._newAddress3 = None
                    self._newTown = None
                    self._newCounty = None
                    self._newZipCode = None
                    self._newCountry = None
                    return
            Holder.__name__ = "SubmitCardBillingAddressCheckLIMBMessage_Holder"
            self.pyclass = Holder

    class SubmitLIMBMessageResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "SubmitLIMBMessageResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.SubmitLIMBMessageResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","SubmitLIMBMessageErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","ArrayOfLIMBValidationErrorsEnum",lazy=False)(pname="validationErrors", aname="_validationErrors", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIResponse_Def not in ns0.SubmitLIMBMessageResp_Def.__bases__:
                bases = list(ns0.SubmitLIMBMessageResp_Def.__bases__)
                bases.insert(0, ns0.APIResponse_Def)
                ns0.SubmitLIMBMessageResp_Def.__bases__ = tuple(bases)

            ns0.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LIMBValidationErrorsEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "LIMBValidationErrorsEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ArrayOfLIMBValidationErrorsEnum_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ArrayOfLIMBValidationErrorsEnum")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfLIMBValidationErrorsEnum_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","LIMBValidationErrorsEnum",lazy=False)(pname=(ns,"LIMBValidationErrorsEnum"), aname="_LIMBValidationErrorsEnum", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._LIMBValidationErrorsEnum = []
                    return
            Holder.__name__ = "ArrayOfLIMBValidationErrorsEnum_Holder"
            self.pyclass = Holder

    class SubmitLIMBMessageErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "SubmitLIMBMessageErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LogoutErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "LogoutErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LogoutResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "LogoutResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.LogoutResp_Def.schema
            TClist = [ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","LogoutErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIResponse_Def not in ns0.LogoutResp_Def.__bases__:
                bases = list(ns0.LogoutResp_Def.__bases__)
                bases.insert(0, ns0.APIResponse_Def)
                ns0.LogoutResp_Def.__bases__ = tuple(bases)

            ns0.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LogoutReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "LogoutReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.LogoutReq_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIRequest_Def not in ns0.LogoutReq_Def.__bases__:
                bases = list(ns0.LogoutReq_Def.__bases__)
                bases.insert(0, ns0.APIRequest_Def)
                ns0.LogoutReq_Def.__bases__ = tuple(bases)

            ns0.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class KeepAliveResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "KeepAliveResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.KeepAliveResp_Def.schema
            TClist = [ZSI.TC.String(pname="apiVersion", aname="_apiVersion", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIResponse_Def not in ns0.KeepAliveResp_Def.__bases__:
                bases = list(ns0.KeepAliveResp_Def.__bases__)
                bases.insert(0, ns0.APIResponse_Def)
                ns0.KeepAliveResp_Def.__bases__ = tuple(bases)

            ns0.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class KeepAliveReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "KeepAliveReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.KeepAliveReq_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIRequest_Def not in ns0.KeepAliveReq_Def.__bases__:
                bases = list(ns0.KeepAliveReq_Def.__bases__)
                bases.insert(0, ns0.APIRequest_Def)
                ns0.KeepAliveReq_Def.__bases__ = tuple(bases)

            ns0.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class APIRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "APIRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.APIRequest_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","APIRequestHeader",lazy=False)(pname="header", aname="_header", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._header = None
                    return
            Holder.__name__ = "APIRequest_Holder"
            self.pyclass = Holder

    class APIRequestHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "APIRequestHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.APIRequestHeader_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="clientStamp", aname="_clientStamp", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sessionToken", aname="_sessionToken", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._clientStamp = None
                    self._sessionToken = None
                    return
            Holder.__name__ = "APIRequestHeader_Holder"
            self.pyclass = Holder

    class GetEventsResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "GetEventsResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.GetEventsResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","GetEventsErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","ArrayOfBFEvent",lazy=False)(pname="eventItems", aname="_eventItems", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="eventParentId", aname="_eventParentId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","ArrayOfMarketSummary",lazy=False)(pname="marketItems", aname="_marketItems", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","ArrayOfCouponLinks",lazy=False)(pname="couponLinks", aname="_couponLinks", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIResponse_Def not in ns0.GetEventsResp_Def.__bases__:
                bases = list(ns0.GetEventsResp_Def.__bases__)
                bases.insert(0, ns0.APIResponse_Def)
                ns0.GetEventsResp_Def.__bases__ = tuple(bases)

            ns0.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetEventsErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "GetEventsErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class BFEvent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "BFEvent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.BFEvent_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="eventId", aname="_eventId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="eventName", aname="_eventName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="eventTypeId", aname="_eventTypeId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="menuLevel", aname="_menuLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="orderIndex", aname="_orderIndex", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="startTime", aname="_startTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="timezone", aname="_timezone", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._eventId = None
                    self._eventName = None
                    self._eventTypeId = None
                    self._menuLevel = None
                    self._orderIndex = None
                    self._startTime = None
                    self._timezone = None
                    return
            Holder.__name__ = "BFEvent_Holder"
            self.pyclass = Holder

    class ArrayOfBFEvent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ArrayOfBFEvent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfBFEvent_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","BFEvent",lazy=False)(pname=(ns,"BFEvent"), aname="_BFEvent", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._BFEvent = []
                    return
            Holder.__name__ = "ArrayOfBFEvent_Holder"
            self.pyclass = Holder

    class MarketSummary_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "MarketSummary")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.MarketSummary_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="eventTypeId", aname="_eventTypeId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="marketName", aname="_marketName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","MarketTypeEnum",lazy=False)(pname="marketType", aname="_marketType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","MarketTypeVariantEnum",lazy=False)(pname="marketTypeVariant", aname="_marketTypeVariant", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="menuLevel", aname="_menuLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="orderIndex", aname="_orderIndex", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="startTime", aname="_startTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="timezone", aname="_timezone", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="venue", aname="_venue", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="betDelay", aname="_betDelay", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="numberOfWinners", aname="_numberOfWinners", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="eventParentId", aname="_eventParentId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="exchangeId", aname="_exchangeId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._eventTypeId = None
                    self._marketId = None
                    self._marketName = None
                    self._marketType = None
                    self._marketTypeVariant = None
                    self._menuLevel = None
                    self._orderIndex = None
                    self._startTime = None
                    self._timezone = None
                    self._venue = None
                    self._betDelay = None
                    self._numberOfWinners = None
                    self._eventParentId = None
                    self._exchangeId = None
                    return
            Holder.__name__ = "MarketSummary_Holder"
            self.pyclass = Holder

    class MarketTypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "MarketTypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MarketTypeVariantEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "MarketTypeVariantEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ArrayOfMarketSummary_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ArrayOfMarketSummary")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfMarketSummary_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","MarketSummary",lazy=False)(pname=(ns,"MarketSummary"), aname="_MarketSummary", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MarketSummary = []
                    return
            Holder.__name__ = "ArrayOfMarketSummary_Holder"
            self.pyclass = Holder

    class CouponLink_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "CouponLink")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CouponLink_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="couponId", aname="_couponId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="couponName", aname="_couponName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._couponId = None
                    self._couponName = None
                    return
            Holder.__name__ = "CouponLink_Holder"
            self.pyclass = Holder

    class ArrayOfCouponLinks_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ArrayOfCouponLinks")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfCouponLinks_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","CouponLink",lazy=False)(pname=(ns,"CouponLink"), aname="_CouponLink", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CouponLink = []
                    return
            Holder.__name__ = "ArrayOfCouponLinks_Holder"
            self.pyclass = Holder

    class GetEventsReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "GetEventsReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.GetEventsReq_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="eventParentId", aname="_eventParentId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="locale", aname="_locale", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIRequest_Def not in ns0.GetEventsReq_Def.__bases__:
                bases = list(ns0.GetEventsReq_Def.__bases__)
                bases.insert(0, ns0.APIRequest_Def)
                ns0.GetEventsReq_Def.__bases__ = tuple(bases)

            ns0.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetEventTypesResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "GetEventTypesResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.GetEventTypesResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","ArrayOfEventType",lazy=False)(pname="eventTypeItems", aname="_eventTypeItems", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","GetEventsErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIResponse_Def not in ns0.GetEventTypesResp_Def.__bases__:
                bases = list(ns0.GetEventTypesResp_Def.__bases__)
                bases.insert(0, ns0.APIResponse_Def)
                ns0.GetEventTypesResp_Def.__bases__ = tuple(bases)

            ns0.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class EventType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "EventType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.EventType_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="nextMarketId", aname="_nextMarketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="exchangeId", aname="_exchangeId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._name = None
                    self._nextMarketId = None
                    self._exchangeId = None
                    return
            Holder.__name__ = "EventType_Holder"
            self.pyclass = Holder

    class ArrayOfEventType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ArrayOfEventType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfEventType_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","EventType",lazy=False)(pname=(ns,"EventType"), aname="_EventType", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._EventType = []
                    return
            Holder.__name__ = "ArrayOfEventType_Holder"
            self.pyclass = Holder

    class GetEventTypesReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "GetEventTypesReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.GetEventTypesReq_Def.schema
            TClist = [ZSI.TC.String(pname="locale", aname="_locale", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIRequest_Def not in ns0.GetEventTypesReq_Def.__bases__:
                bases = list(ns0.GetEventTypesReq_Def.__bases__)
                bases.insert(0, ns0.APIRequest_Def)
                ns0.GetEventTypesReq_Def.__bases__ = tuple(bases)

            ns0.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MarketStatusEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "MarketStatusEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Runner_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "Runner")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Runner_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="asianLineId", aname="_asianLineId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="handicap", aname="_handicap", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="selectionId", aname="_selectionId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._asianLineId = None
                    self._handicap = None
                    self._name = None
                    self._selectionId = None
                    return
            Holder.__name__ = "Runner_Holder"
            self.pyclass = Holder

    class GetSubscriptionInfoResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "GetSubscriptionInfoResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.GetSubscriptionInfoResp_Def.schema
            TClist = [ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","ArrayOfSubscription",lazy=False)(pname="subscriptions", aname="_subscriptions", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIResponse_Def not in ns0.GetSubscriptionInfoResp_Def.__bases__:
                bases = list(ns0.GetSubscriptionInfoResp_Def.__bases__)
                bases.insert(0, ns0.APIResponse_Def)
                ns0.GetSubscriptionInfoResp_Def.__bases__ = tuple(bases)

            ns0.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Subscription_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "Subscription")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Subscription_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname="billingAmount", aname="_billingAmount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="billingDate", aname="_billingDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","BillingPeriodEnum",lazy=False)(pname="billingPeriod", aname="_billingPeriod", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="productId", aname="_productId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="productName", aname="_productName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","ArrayOfServiceCall",lazy=False)(pname="services", aname="_services", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="setupCharge", aname="_setupCharge", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="setupChargeActive", aname="_setupChargeActive", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","SubscriptionStatusEnum",lazy=False)(pname="status", aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="subscribedDate", aname="_subscribedDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="vatEnabled", aname="_vatEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._billingAmount = None
                    self._billingDate = None
                    self._billingPeriod = None
                    self._productId = None
                    self._productName = None
                    self._services = None
                    self._setupCharge = None
                    self._setupChargeActive = None
                    self._status = None
                    self._subscribedDate = None
                    self._vatEnabled = None
                    return
            Holder.__name__ = "Subscription_Holder"
            self.pyclass = Holder

    class BillingPeriodEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "BillingPeriodEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ServiceCall_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ServiceCall")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ServiceCall_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="maxUsages", aname="_maxUsages", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="period", aname="_period", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="periodExpiry", aname="_periodExpiry", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","ServiceEnum",lazy=False)(pname="serviceType", aname="_serviceType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="usageCount", aname="_usageCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._maxUsages = None
                    self._period = None
                    self._periodExpiry = None
                    self._serviceType = None
                    self._usageCount = None
                    return
            Holder.__name__ = "ServiceCall_Holder"
            self.pyclass = Holder

    class ServiceEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ServiceEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ArrayOfServiceCall_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ArrayOfServiceCall")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfServiceCall_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","ServiceCall",lazy=False)(pname=(ns,"ServiceCall"), aname="_ServiceCall", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ServiceCall = []
                    return
            Holder.__name__ = "ArrayOfServiceCall_Holder"
            self.pyclass = Holder

    class SubscriptionStatusEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "SubscriptionStatusEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ArrayOfSubscription_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ArrayOfSubscription")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfSubscription_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","Subscription",lazy=False)(pname=(ns,"Subscription"), aname="_Subscription", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Subscription = []
                    return
            Holder.__name__ = "ArrayOfSubscription_Holder"
            self.pyclass = Holder

    class GetSubscriptionInfoReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "GetSubscriptionInfoReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.GetSubscriptionInfoReq_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIRequest_Def not in ns0.GetSubscriptionInfoReq_Def.__bases__:
                bases = list(ns0.GetSubscriptionInfoReq_Def.__bases__)
                bases.insert(0, ns0.APIRequest_Def)
                ns0.GetSubscriptionInfoReq_Def.__bases__ = tuple(bases)

            ns0.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DepositFromPaymentCardResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "DepositFromPaymentCardResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DepositFromPaymentCardResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","PaymentsErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="fee", aname="_fee", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="maxAmount", aname="_maxAmount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="minAmount", aname="_minAmount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="netAmount", aname="_netAmount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="transactionId", aname="_transactionId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIResponse_Def not in ns0.DepositFromPaymentCardResp_Def.__bases__:
                bases = list(ns0.DepositFromPaymentCardResp_Def.__bases__)
                bases.insert(0, ns0.APIResponse_Def)
                ns0.DepositFromPaymentCardResp_Def.__bases__ = tuple(bases)

            ns0.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PaymentsErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "PaymentsErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DepositFromPaymentCardReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "DepositFromPaymentCardReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DepositFromPaymentCardReq_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname="amount", aname="_amount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cardIdentifier", aname="_cardIdentifier", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cv2", aname="_cv2", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIRequest_Def not in ns0.DepositFromPaymentCardReq_Def.__bases__:
                bases = list(ns0.DepositFromPaymentCardReq_Def.__bases__)
                bases.insert(0, ns0.APIRequest_Def)
                ns0.DepositFromPaymentCardReq_Def.__bases__ = tuple(bases)

            ns0.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AddPaymentCardReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "AddPaymentCardReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AddPaymentCardReq_Def.schema
            TClist = [ZSI.TC.String(pname="cardNumber", aname="_cardNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","CardTypeEnum",lazy=False)(pname="cardType", aname="_cardType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="startDate", aname="_startDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="expiryDate", aname="_expiryDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="issueNumber", aname="_issueNumber", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="billingName", aname="_billingName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nickName", aname="_nickName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address1", aname="_address1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address2", aname="_address2", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address3", aname="_address3", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address4", aname="_address4", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="town", aname="_town", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="county", aname="_county", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="zipCode", aname="_zipCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="country", aname="_country", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","PaymentCardStatusEnum",lazy=False)(pname="cardStatus", aname="_cardStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIRequest_Def not in ns0.AddPaymentCardReq_Def.__bases__:
                bases = list(ns0.AddPaymentCardReq_Def.__bases__)
                bases.insert(0, ns0.APIRequest_Def)
                ns0.AddPaymentCardReq_Def.__bases__ = tuple(bases)

            ns0.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DeletePaymentCardReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "DeletePaymentCardReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DeletePaymentCardReq_Def.schema
            TClist = [ZSI.TC.String(pname="nickName", aname="_nickName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIRequest_Def not in ns0.DeletePaymentCardReq_Def.__bases__:
                bases = list(ns0.DeletePaymentCardReq_Def.__bases__)
                bases.insert(0, ns0.APIRequest_Def)
                ns0.DeletePaymentCardReq_Def.__bases__ = tuple(bases)

            ns0.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetPaymentCardReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "GetPaymentCardReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.GetPaymentCardReq_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIRequest_Def not in ns0.GetPaymentCardReq_Def.__bases__:
                bases = list(ns0.GetPaymentCardReq_Def.__bases__)
                bases.insert(0, ns0.APIRequest_Def)
                ns0.GetPaymentCardReq_Def.__bases__ = tuple(bases)

            ns0.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UpdatePaymentCardReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "UpdatePaymentCardReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.UpdatePaymentCardReq_Def.schema
            TClist = [ZSI.TC.String(pname="nickName", aname="_nickName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="expiryDate", aname="_expiryDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="startDate", aname="_startDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="issueNumber", aname="_issueNumber", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address1", aname="_address1", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address2", aname="_address2", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address3", aname="_address3", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address4", aname="_address4", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="town", aname="_town", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="county", aname="_county", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="zipCode", aname="_zipCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="country", aname="_country", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","PaymentCardStatusEnum",lazy=False)(pname="cardStatus", aname="_cardStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIRequest_Def not in ns0.UpdatePaymentCardReq_Def.__bases__:
                bases = list(ns0.UpdatePaymentCardReq_Def.__bases__)
                bases.insert(0, ns0.APIRequest_Def)
                ns0.UpdatePaymentCardReq_Def.__bases__ = tuple(bases)

            ns0.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CardTypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "CardTypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AddPaymentCardResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "AddPaymentCardResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AddPaymentCardResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","AddPaymentCardErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","PaymentCard",lazy=False)(pname="paymentCard", aname="_paymentCard", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIResponse_Def not in ns0.AddPaymentCardResp_Def.__bases__:
                bases = list(ns0.AddPaymentCardResp_Def.__bases__)
                bases.insert(0, ns0.APIResponse_Def)
                ns0.AddPaymentCardResp_Def.__bases__ = tuple(bases)

            ns0.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AddPaymentCardErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "AddPaymentCardErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DeletePaymentCardErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "DeletePaymentCardErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DeletePaymentCardResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "DeletePaymentCardResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DeletePaymentCardResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","DeletePaymentCardErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nickName", aname="_nickName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="billingName", aname="_billingName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cardShortNumber", aname="_cardShortNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","CardTypeEnum",lazy=False)(pname="cardType", aname="_cardType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="issuingCountry", aname="_issuingCountry", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="expiryDate", aname="_expiryDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIResponse_Def not in ns0.DeletePaymentCardResp_Def.__bases__:
                bases = list(ns0.DeletePaymentCardResp_Def.__bases__)
                bases.insert(0, ns0.APIResponse_Def)
                ns0.DeletePaymentCardResp_Def.__bases__ = tuple(bases)

            ns0.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UpdatePaymentCardResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "UpdatePaymentCardResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.UpdatePaymentCardResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","UpdatePaymentCardErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nickName", aname="_nickName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="billingName", aname="_billingName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","CardTypeEnum",lazy=False)(pname="cardType", aname="_cardType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="expiryDate", aname="_expiryDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="startDate", aname="_startDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address1", aname="_address1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address2", aname="_address2", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address3", aname="_address3", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address4", aname="_address4", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="zipCode", aname="_zipCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="country", aname="_country", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIResponse_Def not in ns0.UpdatePaymentCardResp_Def.__bases__:
                bases = list(ns0.UpdatePaymentCardResp_Def.__bases__)
                bases.insert(0, ns0.APIResponse_Def)
                ns0.UpdatePaymentCardResp_Def.__bases__ = tuple(bases)

            ns0.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UpdatePaymentCardErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "UpdatePaymentCardErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GetPaymentCardResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "GetPaymentCardResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.GetPaymentCardResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","GetPaymentCardErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","ArrayOfPaymentCard",lazy=False)(pname="paymentCardItems", aname="_paymentCardItems", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIResponse_Def not in ns0.GetPaymentCardResp_Def.__bases__:
                bases = list(ns0.GetPaymentCardResp_Def.__bases__)
                bases.insert(0, ns0.APIResponse_Def)
                ns0.GetPaymentCardResp_Def.__bases__ = tuple(bases)

            ns0.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetPaymentCardErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "GetPaymentCardErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PaymentCard_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "PaymentCard")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PaymentCard_Def.schema
            TClist = [ZSI.TC.String(pname="nickName", aname="_nickName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cardShortNumber", aname="_cardShortNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="expiryDate", aname="_expiryDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="startDate", aname="_startDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="issueNumber", aname="_issueNumber", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","CardTypeEnum",lazy=False)(pname="cardType", aname="_cardType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="issuingCountryIso3", aname="_issuingCountryIso3", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="totalDeposits", aname="_totalDeposits", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="totalWithdrawals", aname="_totalWithdrawals", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="netDeposits", aname="_netDeposits", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="validationStatus", aname="_validationStatus", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="billingName", aname="_billingName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="billingAddress1", aname="_billingAddress1", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="billingAddress2", aname="_billingAddress2", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="billingAddress3", aname="_billingAddress3", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="billingAddress4", aname="_billingAddress4", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="town", aname="_town", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="county", aname="_county", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="postcode", aname="_postcode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="billingCountryIso3", aname="_billingCountryIso3", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","PaymentCardStatusEnum",lazy=False)(pname="cardStatus", aname="_cardStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._nickName = None
                    self._cardShortNumber = None
                    self._expiryDate = None
                    self._startDate = None
                    self._issueNumber = None
                    self._cardType = None
                    self._issuingCountryIso3 = None
                    self._totalDeposits = None
                    self._totalWithdrawals = None
                    self._netDeposits = None
                    self._validationStatus = None
                    self._billingName = None
                    self._billingAddress1 = None
                    self._billingAddress2 = None
                    self._billingAddress3 = None
                    self._billingAddress4 = None
                    self._town = None
                    self._county = None
                    self._postcode = None
                    self._billingCountryIso3 = None
                    self._cardStatus = None
                    return
            Holder.__name__ = "PaymentCard_Holder"
            self.pyclass = Holder

    class PaymentCardStatusEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "PaymentCardStatusEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ArrayOfPaymentCard_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ArrayOfPaymentCard")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfPaymentCard_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","PaymentCard",lazy=False)(pname=(ns,"PaymentCard"), aname="_PaymentCard", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._PaymentCard = []
                    return
            Holder.__name__ = "ArrayOfPaymentCard_Holder"
            self.pyclass = Holder

    class WithdrawToPaymentCardResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "WithdrawToPaymentCardResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.WithdrawToPaymentCardResp_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname="amountWithdrawn", aname="_amountWithdrawn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","PaymentsErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="maxAmount", aname="_maxAmount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIResponse_Def not in ns0.WithdrawToPaymentCardResp_Def.__bases__:
                bases = list(ns0.WithdrawToPaymentCardResp_Def.__bases__)
                bases.insert(0, ns0.APIResponse_Def)
                ns0.WithdrawToPaymentCardResp_Def.__bases__ = tuple(bases)

            ns0.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class WithdrawToPaymentCardReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "WithdrawToPaymentCardReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.WithdrawToPaymentCardReq_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname="amount", aname="_amount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cardIdentifier", aname="_cardIdentifier", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIRequest_Def not in ns0.WithdrawToPaymentCardReq_Def.__bases__:
                bases = list(ns0.WithdrawToPaymentCardReq_Def.__bases__)
                bases.insert(0, ns0.APIRequest_Def)
                ns0.WithdrawToPaymentCardReq_Def.__bases__ = tuple(bases)

            ns0.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class WithdrawByBankTransferReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "WithdrawByBankTransferReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.WithdrawByBankTransferReq_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","WithdrawByBankTransferModeEnum",lazy=False)(pname="mode", aname="_mode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="amount", aname="_amount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","BankAccountDetails",lazy=False)(pname="bankAccountDetails", aname="_bankAccountDetails", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="expressTransfer", aname="_expressTransfer", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIRequest_Def not in ns0.WithdrawByBankTransferReq_Def.__bases__:
                bases = list(ns0.WithdrawByBankTransferReq_Def.__bases__)
                bases.insert(0, ns0.APIRequest_Def)
                ns0.WithdrawByBankTransferReq_Def.__bases__ = tuple(bases)

            ns0.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class WithdrawByBankTransferResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "WithdrawByBankTransferResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.WithdrawByBankTransferResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","PaymentsErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="amountWithdrawn", aname="_amountWithdrawn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="minAmount", aname="_minAmount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="maxAmount", aname="_maxAmount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="amountAvailable", aname="_amountAvailable", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="transferFee", aname="_transferFee", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="expressTransferFee", aname="_expressTransferFee", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="expressTransferAvailable", aname="_expressTransferAvailable", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","BankAccountDetails",lazy=False)(pname="lastBankAccountDetails", aname="_lastBankAccountDetails", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","ArrayOfBankAccountDetailsField",lazy=False)(pname="requiredBankAccountDetailsFields", aname="_requiredBankAccountDetailsFields", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="transactionId", aname="_transactionId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIResponse_Def not in ns0.WithdrawByBankTransferResp_Def.__bases__:
                bases = list(ns0.WithdrawByBankTransferResp_Def.__bases__)
                bases.insert(0, ns0.APIResponse_Def)
                ns0.WithdrawByBankTransferResp_Def.__bases__ = tuple(bases)

            ns0.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class WithdrawByBankTransferModeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "WithdrawByBankTransferModeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ArrayOfBankAccountDetailsField_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ArrayOfBankAccountDetailsField")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfBankAccountDetailsField_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","BankAccountDetailsField",lazy=False)(pname=(ns,"BankAccountDetailsField"), aname="_BankAccountDetailsField", minOccurs=1, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._BankAccountDetailsField = []
                    return
            Holder.__name__ = "ArrayOfBankAccountDetailsField_Holder"
            self.pyclass = Holder

    class BankAccountDetailsField_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "BankAccountDetailsField")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.BankAccountDetailsField_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","BankAccountDetailsFieldEnum",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.AbstractField_Def not in ns0.BankAccountDetailsField_Def.__bases__:
                bases = list(ns0.BankAccountDetailsField_Def.__bases__)
                bases.insert(0, ns0.AbstractField_Def)
                ns0.BankAccountDetailsField_Def.__bases__ = tuple(bases)

            ns0.AbstractField_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BankAccountDetailsFieldEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "BankAccountDetailsFieldEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AbstractField_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "AbstractField")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AbstractField_Def.schema
            TClist = [ZSI.TC.Boolean(pname="required", aname="_required", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="readOnly", aname="_readOnly", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="size", aname="_size", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="minLength", aname="_minLength", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="maxLength", aname="_maxLength", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="regExp", aname="_regExp", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._required = None
                    self._readOnly = None
                    self._size = None
                    self._minLength = None
                    self._maxLength = None
                    self._regExp = None
                    return
            Holder.__name__ = "AbstractField_Holder"
            self.pyclass = Holder

    class BasicBankAccountDetails_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "BasicBankAccountDetails")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.BasicBankAccountDetails_Def.schema
            TClist = [ZSI.TC.String(pname="bankName", aname="_bankName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="accountHoldingBranch", aname="_accountHoldingBranch", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bankGiroCreditNumber", aname="_bankGiroCreditNumber", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="accountNumber", aname="_accountNumber", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sortCode", aname="_sortCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bankCode", aname="_bankCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="blzCode", aname="_blzCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bankBsb", aname="_bankBsb", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="branchCode", aname="_branchCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bankLocationIso3", aname="_bankLocationIso3", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._bankName = None
                    self._accountHoldingBranch = None
                    self._bankGiroCreditNumber = None
                    self._accountNumber = None
                    self._sortCode = None
                    self._bankCode = None
                    self._blzCode = None
                    self._bankBsb = None
                    self._branchCode = None
                    self._bankLocationIso3 = None
                    return
            Holder.__name__ = "BasicBankAccountDetails_Holder"
            self.pyclass = Holder

    class BankAccountDetails_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "BankAccountDetails")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.BankAccountDetails_Def.schema
            TClist = [ZSI.TC.String(pname="payee", aname="_payee", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","BankAccountTypeEnum",lazy=False)(pname="accountType", aname="_accountType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bankKey", aname="_bankKey", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="routing", aname="_routing", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="abiCab", aname="_abiCab", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.BasicBankAccountDetails_Def not in ns0.BankAccountDetails_Def.__bases__:
                bases = list(ns0.BankAccountDetails_Def.__bases__)
                bases.insert(0, ns0.BasicBankAccountDetails_Def)
                ns0.BankAccountDetails_Def.__bases__ = tuple(bases)

            ns0.BasicBankAccountDetails_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BankAccountTypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "BankAccountTypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class TransferFundsReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "TransferFundsReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.TransferFundsReq_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="sourceWalletId", aname="_sourceWalletId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="targetWalletId", aname="_targetWalletId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="amount", aname="_amount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIRequest_Def not in ns0.TransferFundsReq_Def.__bases__:
                bases = list(ns0.TransferFundsReq_Def.__bases__)
                bases.insert(0, ns0.APIRequest_Def)
                ns0.TransferFundsReq_Def.__bases__ = tuple(bases)

            ns0.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TransferFundsResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "TransferFundsResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.TransferFundsResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","TransferFundsErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="monthlyDepositTotal", aname="_monthlyDepositTotal", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIResponse_Def not in ns0.TransferFundsResp_Def.__bases__:
                bases = list(ns0.TransferFundsResp_Def.__bases__)
                bases.insert(0, ns0.APIResponse_Def)
                ns0.TransferFundsResp_Def.__bases__ = tuple(bases)

            ns0.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TransferFundsErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "TransferFundsErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SelfExcludeReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "SelfExcludeReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.SelfExcludeReq_Def.schema
            TClist = [ZSI.TC.Boolean(pname="selfExclude", aname="_selfExclude", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIRequest_Def not in ns0.SelfExcludeReq_Def.__bases__:
                bases = list(ns0.SelfExcludeReq_Def.__bases__)
                bases.insert(0, ns0.APIRequest_Def)
                ns0.SelfExcludeReq_Def.__bases__ = tuple(bases)

            ns0.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SelfExcludeResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "SelfExcludeResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.SelfExcludeResp_Def.schema
            TClist = [ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","SelfExcludeErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIResponse_Def not in ns0.SelfExcludeResp_Def.__bases__:
                bases = list(ns0.SelfExcludeResp_Def.__bases__)
                bases.insert(0, ns0.APIResponse_Def)
                ns0.SelfExcludeResp_Def.__bases__ = tuple(bases)

            ns0.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SelfExcludeErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "SelfExcludeErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ConvertCurrencyResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ConvertCurrencyResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ConvertCurrencyResp_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname="convertedAmount", aname="_convertedAmount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","ConvertCurrencyErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIResponse_Def not in ns0.ConvertCurrencyResp_Def.__bases__:
                bases = list(ns0.ConvertCurrencyResp_Def.__bases__)
                bases.insert(0, ns0.APIResponse_Def)
                ns0.ConvertCurrencyResp_Def.__bases__ = tuple(bases)

            ns0.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ConvertCurrencyErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ConvertCurrencyErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ConvertCurrencyReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ConvertCurrencyReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ConvertCurrencyReq_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname="amount", aname="_amount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="fromCurrency", aname="_fromCurrency", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="toCurrency", aname="_toCurrency", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIRequest_Def not in ns0.ConvertCurrencyReq_Def.__bases__:
                bases = list(ns0.ConvertCurrencyReq_Def.__bases__)
                bases.insert(0, ns0.APIRequest_Def)
                ns0.ConvertCurrencyReq_Def.__bases__ = tuple(bases)

            ns0.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetCurrenciesResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "GetCurrenciesResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.GetCurrenciesResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","ArrayOfCurrency",lazy=False)(pname="currencyItems", aname="_currencyItems", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIResponse_Def not in ns0.GetCurrenciesResp_Def.__bases__:
                bases = list(ns0.GetCurrenciesResp_Def.__bases__)
                bases.insert(0, ns0.APIResponse_Def)
                ns0.GetCurrenciesResp_Def.__bases__ = tuple(bases)

            ns0.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Currency_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "Currency")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Currency_Def.schema
            TClist = [ZSI.TC.String(pname="currencyCode", aname="_currencyCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="rateGBP", aname="_rateGBP", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._currencyCode = None
                    self._rateGBP = None
                    return
            Holder.__name__ = "Currency_Holder"
            self.pyclass = Holder

    class ArrayOfCurrency_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ArrayOfCurrency")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfCurrency_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","Currency",lazy=False)(pname=(ns,"Currency"), aname="_Currency", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Currency = []
                    return
            Holder.__name__ = "ArrayOfCurrency_Holder"
            self.pyclass = Holder

    class GetCurrenciesReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "GetCurrenciesReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.GetCurrenciesReq_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIRequest_Def not in ns0.GetCurrenciesReq_Def.__bases__:
                bases = list(ns0.GetCurrenciesReq_Def.__bases__)
                bases.insert(0, ns0.APIRequest_Def)
                ns0.GetCurrenciesReq_Def.__bases__ = tuple(bases)

            ns0.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetCurrenciesV2Resp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "GetCurrenciesV2Resp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.GetCurrenciesV2Resp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","ArrayOfCurrencyV2",lazy=False)(pname="currencyItems", aname="_currencyItems", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIResponse_Def not in ns0.GetCurrenciesV2Resp_Def.__bases__:
                bases = list(ns0.GetCurrenciesV2Resp_Def.__bases__)
                bases.insert(0, ns0.APIResponse_Def)
                ns0.GetCurrenciesV2Resp_Def.__bases__ = tuple(bases)

            ns0.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CurrencyV2_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "CurrencyV2")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CurrencyV2_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname="minimumStake", aname="_minimumStake", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="minimumRangeStake", aname="_minimumRangeStake", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="minimumBSPLayLiability", aname="_minimumBSPLayLiability", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Currency_Def not in ns0.CurrencyV2_Def.__bases__:
                bases = list(ns0.CurrencyV2_Def.__bases__)
                bases.insert(0, ns0.Currency_Def)
                ns0.CurrencyV2_Def.__bases__ = tuple(bases)

            ns0.Currency_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ArrayOfCurrencyV2_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ArrayOfCurrencyV2")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfCurrencyV2_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","CurrencyV2",lazy=False)(pname=(ns,"CurrencyV2"), aname="_CurrencyV2", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CurrencyV2 = []
                    return
            Holder.__name__ = "ArrayOfCurrencyV2_Holder"
            self.pyclass = Holder

    class GetCurrenciesV2Req_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "GetCurrenciesV2Req")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.GetCurrenciesV2Req_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIRequest_Def not in ns0.GetCurrenciesV2Req_Def.__bases__:
                bases = list(ns0.GetCurrenciesV2Req_Def.__bases__)
                bases.insert(0, ns0.APIRequest_Def)
                ns0.GetCurrenciesV2Req_Def.__bases__ = tuple(bases)

            ns0.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ViewReferAndEarnReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ViewReferAndEarnReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ViewReferAndEarnReq_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIRequest_Def not in ns0.ViewReferAndEarnReq_Def.__bases__:
                bases = list(ns0.ViewReferAndEarnReq_Def.__bases__)
                bases.insert(0, ns0.APIRequest_Def)
                ns0.ViewReferAndEarnReq_Def.__bases__ = tuple(bases)

            ns0.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ViewReferAndEarnResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ViewReferAndEarnResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ViewReferAndEarnResp_Def.schema
            TClist = [ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","ViewReferAndEarnErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="referAndEarnCode", aname="_referAndEarnCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIResponse_Def not in ns0.ViewReferAndEarnResp_Def.__bases__:
                bases = list(ns0.ViewReferAndEarnResp_Def.__bases__)
                bases.insert(0, ns0.APIResponse_Def)
                ns0.ViewReferAndEarnResp_Def.__bases__ = tuple(bases)

            ns0.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ViewReferAndEarnErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ViewReferAndEarnErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ViewProfileReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ViewProfileReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ViewProfileReq_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIRequest_Def not in ns0.ViewProfileReq_Def.__bases__:
                bases = list(ns0.ViewProfileReq_Def.__bases__)
                bases.insert(0, ns0.APIRequest_Def)
                ns0.ViewProfileReq_Def.__bases__ = tuple(bases)

            ns0.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ViewProfileResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ViewProfileResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ViewProfileResp_Def.schema
            TClist = [ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","ViewProfileErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","TitleEnum",lazy=False)(pname="title", aname="_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="firstName", aname="_firstName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="surname", aname="_surname", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="userName", aname="_userName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="forumName", aname="_forumName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address1", aname="_address1", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address2", aname="_address2", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address3", aname="_address3", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="townCity", aname="_townCity", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="countyState", aname="_countyState", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="postCode", aname="_postCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="countryOfResidence", aname="_countryOfResidence", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="homeTelephone", aname="_homeTelephone", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="workTelephone", aname="_workTelephone", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mobileTelephone", aname="_mobileTelephone", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="emailAddress", aname="_emailAddress", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="timeZone", aname="_timeZone", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="currency", aname="_currency", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="gamcareLimit", aname="_gamcareLimit", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","GamcareLimitFreqEnum",lazy=False)(pname="gamcareFrequency", aname="_gamcareFrequency", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="gamcareLossLimit", aname="_gamcareLossLimit", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","GamcareLimitFreqEnum",lazy=False)(pname="gamcareLossLimitFrequency", aname="_gamcareLossLimitFrequency", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="gamcareUpdateDate", aname="_gamcareUpdateDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIResponse_Def not in ns0.ViewProfileResp_Def.__bases__:
                bases = list(ns0.ViewProfileResp_Def.__bases__)
                bases.insert(0, ns0.APIResponse_Def)
                ns0.ViewProfileResp_Def.__bases__ = tuple(bases)

            ns0.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ViewProfileV2ReqVersionEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ViewProfileV2ReqVersionEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ViewProfileV2Req_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ViewProfileV2Req")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ViewProfileV2Req_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","ViewProfileV2ReqVersionEnum",lazy=False)(pname="requestVersion", aname="_requestVersion", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIRequest_Def not in ns0.ViewProfileV2Req_Def.__bases__:
                bases = list(ns0.ViewProfileV2Req_Def.__bases__)
                bases.insert(0, ns0.APIRequest_Def)
                ns0.ViewProfileV2Req_Def.__bases__ = tuple(bases)

            ns0.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ViewProfileV2Resp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ViewProfileV2Resp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ViewProfileV2Resp_Def.schema
            TClist = [ZSI.TC.String(pname="tAN", aname="_tAN", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="referAndEarnCode", aname="_referAndEarnCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="earthportID", aname="_earthportID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","KYCStatusEnum",lazy=False)(pname="kYCStatus", aname="_kYCStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nationalIdentifier", aname="_nationalIdentifier", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ViewProfileResp_Def not in ns0.ViewProfileV2Resp_Def.__bases__:
                bases = list(ns0.ViewProfileV2Resp_Def.__bases__)
                bases.insert(0, ns0.ViewProfileResp_Def)
                ns0.ViewProfileV2Resp_Def.__bases__ = tuple(bases)

            ns0.ViewProfileResp_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ViewProfileErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ViewProfileErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ModifyProfileReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ModifyProfileReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ModifyProfileReq_Def.schema
            TClist = [ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address1", aname="_address1", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address2", aname="_address2", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address3", aname="_address3", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="townCity", aname="_townCity", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="countyState", aname="_countyState", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="postCode", aname="_postCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="countryOfResidence", aname="_countryOfResidence", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="homeTelephone", aname="_homeTelephone", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="workTelephone", aname="_workTelephone", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mobileTelephone", aname="_mobileTelephone", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="emailAddress", aname="_emailAddress", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="timeZone", aname="_timeZone", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="depositLimit", aname="_depositLimit", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","GamcareLimitFreqEnum",lazy=False)(pname="depositLimitFrequency", aname="_depositLimitFrequency", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="lossLimit", aname="_lossLimit", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","GamcareLimitFreqEnum",lazy=False)(pname="lossLimitFrequency", aname="_lossLimitFrequency", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nationalIdentifier", aname="_nationalIdentifier", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIRequest_Def not in ns0.ModifyProfileReq_Def.__bases__:
                bases = list(ns0.ModifyProfileReq_Def.__bases__)
                bases.insert(0, ns0.APIRequest_Def)
                ns0.ModifyProfileReq_Def.__bases__ = tuple(bases)

            ns0.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ModifyProfileResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ModifyProfileResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ModifyProfileResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","ModifyProfileErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","ArrayOfValidationErrorsEnum",lazy=False)(pname="validationErrors", aname="_validationErrors", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIResponse_Def not in ns0.ModifyProfileResp_Def.__bases__:
                bases = list(ns0.ModifyProfileResp_Def.__bases__)
                bases.insert(0, ns0.APIResponse_Def)
                ns0.ModifyProfileResp_Def.__bases__ = tuple(bases)

            ns0.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ModifyProfileErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ModifyProfileErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CreateAccountResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "CreateAccountResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CreateAccountResp_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="accountId", aname="_accountId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","AccountStatusEnum",lazy=False)(pname="accountStatus", aname="_accountStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","CreateAccountErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tan", aname="_tan", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="userId", aname="_userId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","ArrayOfValidationErrorsEnum",lazy=False)(pname="validationErrors", aname="_validationErrors", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIResponse_Def not in ns0.CreateAccountResp_Def.__bases__:
                bases = list(ns0.CreateAccountResp_Def.__bases__)
                bases.insert(0, ns0.APIResponse_Def)
                ns0.CreateAccountResp_Def.__bases__ = tuple(bases)

            ns0.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AccountStatusEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "AccountStatusEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CreateAccountErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "CreateAccountErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ValidationErrorsEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ValidationErrorsEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ArrayOfValidationErrorsEnum_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ArrayOfValidationErrorsEnum")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfValidationErrorsEnum_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","ValidationErrorsEnum",lazy=False)(pname=(ns,"ValidationErrorsEnum"), aname="_ValidationErrorsEnum", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ValidationErrorsEnum = []
                    return
            Holder.__name__ = "ArrayOfValidationErrorsEnum_Holder"
            self.pyclass = Holder

    class CreateAccountReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "CreateAccountReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CreateAccountReq_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="acceptedPrivicyPolicyVersion", aname="_acceptedPrivicyPolicyVersion", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="acceptedTermsAndConditionsVersion", aname="_acceptedTermsAndConditionsVersion", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","AccountTypeEnum",lazy=False)(pname="accountType", aname="_accountType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address1", aname="_address1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address2", aname="_address2", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address3", aname="_address3", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="answer1", aname="_answer1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="answer2", aname="_answer2", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="browser", aname="_browser", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="countryOfResidence", aname="_countryOfResidence", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="countyState", aname="_countyState", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="currency", aname="_currency", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="dateOfBirth", aname="_dateOfBirth", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="depositLimit", aname="_depositLimit", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","GamcareLimitFreqEnum",lazy=False)(pname="depositLimitFrequency", aname="_depositLimitFrequency", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="emailAddress", aname="_emailAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="firstName", aname="_firstName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","GenderEnum",lazy=False)(pname="gender", aname="_gender", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="homeTelephone", aname="_homeTelephone", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="informProductsServices", aname="_informProductsServices", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="informSpecialOffers", aname="_informSpecialOffers", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipAddress", aname="_ipAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="locale", aname="_locale", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="lossLimit", aname="_lossLimit", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","GamcareLimitFreqEnum",lazy=False)(pname="lossLimitFrequency", aname="_lossLimitFrequency", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="manualAddress", aname="_manualAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mobileTelephone", aname="_mobileTelephone", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="partnerId", aname="_partnerId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="postCode", aname="_postCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="preferredName", aname="_preferredName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="productId", aname="_productId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","SecurityQuestion1Enum",lazy=False)(pname="question1", aname="_question1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","SecurityQuestion2Enum",lazy=False)(pname="question2", aname="_question2", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="referrerCode", aname="_referrerCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","RegionEnum",lazy=False)(pname="region", aname="_region", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="subPartnerId", aname="_subPartnerId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="superPartnerId", aname="_superPartnerId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="surname", aname="_surname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="timeZone", aname="_timeZone", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/global/v3/","TitleEnum",lazy=False)(pname="title", aname="_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="townCity", aname="_townCity", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="username", aname="_username", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="workTelephone", aname="_workTelephone", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nationalIdentifier", aname="_nationalIdentifier", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIRequest_Def not in ns0.CreateAccountReq_Def.__bases__:
                bases = list(ns0.CreateAccountReq_Def.__bases__)
                bases.insert(0, ns0.APIRequest_Def)
                ns0.CreateAccountReq_Def.__bases__ = tuple(bases)

            ns0.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AccountTypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "AccountTypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GamcareLimitFreqEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "GamcareLimitFreqEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GenderEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "GenderEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SecurityQuestion1Enum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "SecurityQuestion1Enum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SecurityQuestion2Enum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "SecurityQuestion2Enum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RegionEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "RegionEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class TitleEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "TitleEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class KYCStatusEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "KYCStatusEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ForgotPasswordErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ForgotPasswordErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ModifyPasswordErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ModifyPasswordErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SetChatNameErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "SetChatNameErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ForgotPasswordReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ForgotPasswordReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ForgotPasswordReq_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="emailAddress", aname="_emailAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="countryOfResidence", aname="_countryOfResidence", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="forgottenPasswordAnswer1", aname="_forgottenPasswordAnswer1", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="forgottenPasswordAnswer2", aname="_forgottenPasswordAnswer2", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newPassword", aname="_newPassword", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newPasswordRepeat", aname="_newPasswordRepeat", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIRequest_Def not in ns0.ForgotPasswordReq_Def.__bases__:
                bases = list(ns0.ForgotPasswordReq_Def.__bases__)
                bases.insert(0, ns0.APIRequest_Def)
                ns0.ForgotPasswordReq_Def.__bases__ = tuple(bases)

            ns0.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ForgotPasswordResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ForgotPasswordResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ForgotPasswordResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","ForgotPasswordErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="question1", aname="_question1", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="question2", aname="_question2", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIResponse_Def not in ns0.ForgotPasswordResp_Def.__bases__:
                bases = list(ns0.ForgotPasswordResp_Def.__bases__)
                bases.insert(0, ns0.APIResponse_Def)
                ns0.ForgotPasswordResp_Def.__bases__ = tuple(bases)

            ns0.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ModifyPasswordReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ModifyPasswordReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ModifyPasswordReq_Def.schema
            TClist = [ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newPassword", aname="_newPassword", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newPasswordRepeat", aname="_newPasswordRepeat", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIRequest_Def not in ns0.ModifyPasswordReq_Def.__bases__:
                bases = list(ns0.ModifyPasswordReq_Def.__bases__)
                bases.insert(0, ns0.APIRequest_Def)
                ns0.ModifyPasswordReq_Def.__bases__ = tuple(bases)

            ns0.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ModifyPasswordResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "ModifyPasswordResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ModifyPasswordResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","ModifyPasswordErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIResponse_Def not in ns0.ModifyPasswordResp_Def.__bases__:
                bases = list(ns0.ModifyPasswordResp_Def.__bases__)
                bases.insert(0, ns0.APIResponse_Def)
                ns0.ModifyPasswordResp_Def.__bases__ = tuple(bases)

            ns0.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SetChatNameReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "SetChatNameReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.SetChatNameReq_Def.schema
            TClist = [ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="chatName", aname="_chatName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIRequest_Def not in ns0.SetChatNameReq_Def.__bases__:
                bases = list(ns0.SetChatNameReq_Def.__bases__)
                bases.insert(0, ns0.APIRequest_Def)
                ns0.SetChatNameReq_Def.__bases__ = tuple(bases)

            ns0.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SetChatNameResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/global/v3/"
        type = (schema, "SetChatNameResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.SetChatNameResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/global/v3/","SetChatNameErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.APIResponse_Def not in ns0.SetChatNameResp_Def.__bases__:
                bases = list(ns0.SetChatNameResp_Def.__bases__)
                bases.insert(0, ns0.APIResponse_Def)
                ns0.SetChatNameResp_Def.__bases__ = tuple(bases)

            ns0.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

# end class ns0 (tns: http://www.betfair.com/publicapi/types/global/v3/)
