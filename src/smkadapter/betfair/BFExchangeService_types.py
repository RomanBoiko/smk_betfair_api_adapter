##################################################
# file: BFExchangeService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/local/bin/wsdl2py BFExchangeService.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://www.betfair.com/publicapi/v5/BFExchangeService/
##############################

class ns1:
    targetNamespace = "http://www.betfair.com/publicapi/v5/BFExchangeService/"

    class getAccountFunds_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAccountFunds"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getAccountFunds_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetAccountFundsReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getAccountFunds")
            kw["aname"] = "_getAccountFunds"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getAccountFunds_Holder"
            self.pyclass = Holder

    class getAccountFundsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAccountFundsResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getAccountFundsResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetAccountFundsResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getAccountFundsResponse")
            kw["aname"] = "_getAccountFundsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getAccountFundsResponse_Holder"
            self.pyclass = Holder

    class cancelBets_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "cancelBets"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.cancelBets_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","CancelBetsReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","cancelBets")
            kw["aname"] = "_cancelBets"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "cancelBets_Holder"
            self.pyclass = Holder

    class cancelBetsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "cancelBetsResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.cancelBetsResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","CancelBetsResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","cancelBetsResponse")
            kw["aname"] = "_cancelBetsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "cancelBetsResponse_Holder"
            self.pyclass = Holder

    class cancelBetsByMarket_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "cancelBetsByMarket"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.cancelBetsByMarket_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","CancelBetsByMarketReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","cancelBetsByMarket")
            kw["aname"] = "_cancelBetsByMarket"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "cancelBetsByMarket_Holder"
            self.pyclass = Holder

    class cancelBetsByMarketResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "cancelBetsByMarketResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.cancelBetsByMarketResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","CancelBetsByMarketResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","cancelBetsByMarketResponse")
            kw["aname"] = "_cancelBetsByMarketResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "cancelBetsByMarketResponse_Holder"
            self.pyclass = Holder

    class heartbeat_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "heartbeat"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.heartbeat_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","HeartbeatReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","heartbeat")
            kw["aname"] = "_heartbeat"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "heartbeat_Holder"
            self.pyclass = Holder

    class heartbeatResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "heartbeatResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.heartbeatResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","HeartbeatResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","heartbeatResponse")
            kw["aname"] = "_heartbeatResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "heartbeatResponse_Holder"
            self.pyclass = Holder

    class getSilks_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getSilks"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getSilks_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetSilksReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getSilks")
            kw["aname"] = "_getSilks"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getSilks_Holder"
            self.pyclass = Holder

    class getSilksResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getSilksResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getSilksResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetSilksResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getSilksResponse")
            kw["aname"] = "_getSilksResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getSilksResponse_Holder"
            self.pyclass = Holder

    class getSilksV2_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getSilksV2"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getSilksV2_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetSilksV2Req",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getSilksV2")
            kw["aname"] = "_getSilksV2"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getSilksV2_Holder"
            self.pyclass = Holder

    class getSilksV2Response_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getSilksV2Response"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getSilksV2Response_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetSilksV2Resp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getSilksV2Response")
            kw["aname"] = "_getSilksV2Response"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getSilksV2Response_Holder"
            self.pyclass = Holder

    class updateBets_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "updateBets"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.updateBets_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","UpdateBetsReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","updateBets")
            kw["aname"] = "_updateBets"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "updateBets_Holder"
            self.pyclass = Holder

    class updateBetsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "updateBetsResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.updateBetsResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","UpdateBetsResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","updateBetsResponse")
            kw["aname"] = "_updateBetsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "updateBetsResponse_Holder"
            self.pyclass = Holder

    class placeBets_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "placeBets"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.placeBets_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","PlaceBetsReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","placeBets")
            kw["aname"] = "_placeBets"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "placeBets_Holder"
            self.pyclass = Holder

    class placeBetsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "placeBetsResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.placeBetsResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","PlaceBetsResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","placeBetsResponse")
            kw["aname"] = "_placeBetsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "placeBetsResponse_Holder"
            self.pyclass = Holder

    class getCoupon_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCoupon"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getCoupon_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetCouponReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getCoupon")
            kw["aname"] = "_getCoupon"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getCoupon_Holder"
            self.pyclass = Holder

    class getCouponResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCouponResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getCouponResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetCouponResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getCouponResponse")
            kw["aname"] = "_getCouponResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getCouponResponse_Holder"
            self.pyclass = Holder

    class getMarket_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getMarket"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getMarket_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetMarketReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getMarket")
            kw["aname"] = "_getMarket"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getMarket_Holder"
            self.pyclass = Holder

    class getMarketInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getMarketInfo"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getMarketInfo_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetMarketInfoReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getMarketInfo")
            kw["aname"] = "_getMarketInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getMarketInfo_Holder"
            self.pyclass = Holder

    class getMarketInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getMarketInfoResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getMarketInfoResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetMarketInfoResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getMarketInfoResponse")
            kw["aname"] = "_getMarketInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getMarketInfoResponse_Holder"
            self.pyclass = Holder

    class getMarketResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getMarketResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getMarketResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetMarketResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getMarketResponse")
            kw["aname"] = "_getMarketResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getMarketResponse_Holder"
            self.pyclass = Holder

    class getMarketPrices_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getMarketPrices"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getMarketPrices_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetMarketPricesReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getMarketPrices")
            kw["aname"] = "_getMarketPrices"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getMarketPrices_Holder"
            self.pyclass = Holder

    class getMarketPricesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getMarketPricesResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getMarketPricesResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetMarketPricesResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getMarketPricesResponse")
            kw["aname"] = "_getMarketPricesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getMarketPricesResponse_Holder"
            self.pyclass = Holder

    class getCompleteMarketPricesCompressed_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCompleteMarketPricesCompressed"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getCompleteMarketPricesCompressed_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetCompleteMarketPricesCompressedReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getCompleteMarketPricesCompressed")
            kw["aname"] = "_getCompleteMarketPricesCompressed"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getCompleteMarketPricesCompressed_Holder"
            self.pyclass = Holder

    class getCompleteMarketPricesCompressedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCompleteMarketPricesCompressedResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getCompleteMarketPricesCompressedResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetCompleteMarketPricesCompressedResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getCompleteMarketPricesCompressedResponse")
            kw["aname"] = "_getCompleteMarketPricesCompressedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getCompleteMarketPricesCompressedResponse_Holder"
            self.pyclass = Holder

    class getMarketTradedVolumeCompressed_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getMarketTradedVolumeCompressed"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getMarketTradedVolumeCompressed_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetMarketTradedVolumeCompressedReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getMarketTradedVolumeCompressed")
            kw["aname"] = "_getMarketTradedVolumeCompressed"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getMarketTradedVolumeCompressed_Holder"
            self.pyclass = Holder

    class getMarketTradedVolumeCompressedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getMarketTradedVolumeCompressedResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getMarketTradedVolumeCompressedResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetMarketTradedVolumeCompressedResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getMarketTradedVolumeCompressedResponse")
            kw["aname"] = "_getMarketTradedVolumeCompressedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getMarketTradedVolumeCompressedResponse_Holder"
            self.pyclass = Holder

    class getMarketPricesCompressed_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getMarketPricesCompressed"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getMarketPricesCompressed_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetMarketPricesCompressedReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getMarketPricesCompressed")
            kw["aname"] = "_getMarketPricesCompressed"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getMarketPricesCompressed_Holder"
            self.pyclass = Holder

    class getMarketPricesCompressedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getMarketPricesCompressedResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getMarketPricesCompressedResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetMarketPricesCompressedResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getMarketPricesCompressedResponse")
            kw["aname"] = "_getMarketPricesCompressedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getMarketPricesCompressedResponse_Holder"
            self.pyclass = Holder

    class getAllMarkets_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAllMarkets"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getAllMarkets_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetAllMarketsReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getAllMarkets")
            kw["aname"] = "_getAllMarkets"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getAllMarkets_Holder"
            self.pyclass = Holder

    class getAllMarketsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAllMarketsResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getAllMarketsResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetAllMarketsResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getAllMarketsResponse")
            kw["aname"] = "_getAllMarketsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getAllMarketsResponse_Holder"
            self.pyclass = Holder

    class getInPlayMarkets_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getInPlayMarkets"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getInPlayMarkets_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetInPlayMarketsReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getInPlayMarkets")
            kw["aname"] = "_getInPlayMarkets"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getInPlayMarkets_Holder"
            self.pyclass = Holder

    class getInPlayMarketsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getInPlayMarketsResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getInPlayMarketsResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetInPlayMarketsResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getInPlayMarketsResponse")
            kw["aname"] = "_getInPlayMarketsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getInPlayMarketsResponse_Holder"
            self.pyclass = Holder

    class getPrivateMarkets_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getPrivateMarkets"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getPrivateMarkets_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetPrivateMarketsReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getPrivateMarkets")
            kw["aname"] = "_getPrivateMarkets"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getPrivateMarkets_Holder"
            self.pyclass = Holder

    class getPrivateMarketsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getPrivateMarketsResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getPrivateMarketsResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetPrivateMarketsResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getPrivateMarketsResponse")
            kw["aname"] = "_getPrivateMarketsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getPrivateMarketsResponse_Holder"
            self.pyclass = Holder

    class getCurrentBets_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCurrentBets"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getCurrentBets_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetCurrentBetsReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getCurrentBets")
            kw["aname"] = "_getCurrentBets"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getCurrentBets_Holder"
            self.pyclass = Holder

    class getCurrentBetsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCurrentBetsResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getCurrentBetsResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetCurrentBetsResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getCurrentBetsResponse")
            kw["aname"] = "_getCurrentBetsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getCurrentBetsResponse_Holder"
            self.pyclass = Holder

    class getCurrentBetsLite_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCurrentBetsLite"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getCurrentBetsLite_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetCurrentBetsLiteReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getCurrentBetsLite")
            kw["aname"] = "_getCurrentBetsLite"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getCurrentBetsLite_Holder"
            self.pyclass = Holder

    class getCurrentBetsLiteResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCurrentBetsLiteResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getCurrentBetsLiteResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetCurrentBetsLiteResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getCurrentBetsLiteResponse")
            kw["aname"] = "_getCurrentBetsLiteResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getCurrentBetsLiteResponse_Holder"
            self.pyclass = Holder

    class getMUBets_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getMUBets"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getMUBets_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetMUBetsReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getMUBets")
            kw["aname"] = "_getMUBets"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getMUBets_Holder"
            self.pyclass = Holder

    class getMUBetsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getMUBetsResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getMUBetsResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetMUBetsResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getMUBetsResponse")
            kw["aname"] = "_getMUBetsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getMUBetsResponse_Holder"
            self.pyclass = Holder

    class getMUBetsLite_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getMUBetsLite"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getMUBetsLite_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetMUBetsLiteReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getMUBetsLite")
            kw["aname"] = "_getMUBetsLite"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getMUBetsLite_Holder"
            self.pyclass = Holder

    class getMUBetsLiteResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getMUBetsLiteResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getMUBetsLiteResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetMUBetsLiteResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getMUBetsLiteResponse")
            kw["aname"] = "_getMUBetsLiteResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getMUBetsLiteResponse_Holder"
            self.pyclass = Holder

    class getDetailAvailableMktDepth_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getDetailAvailableMktDepth"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getDetailAvailableMktDepth_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetDetailedAvailableMktDepthReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getDetailAvailableMktDepth")
            kw["aname"] = "_getDetailAvailableMktDepth"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getDetailAvailableMktDepth_Holder"
            self.pyclass = Holder

    class getDetailAvailableMktDepthResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getDetailAvailableMktDepthResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getDetailAvailableMktDepthResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetDetailedAvailableMktDepthResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getDetailAvailableMktDepthResponse")
            kw["aname"] = "_getDetailAvailableMktDepthResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getDetailAvailableMktDepthResponse_Holder"
            self.pyclass = Holder

    class getMarketTradedVolume_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getMarketTradedVolume"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getMarketTradedVolume_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetMarketTradedVolumeReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getMarketTradedVolume")
            kw["aname"] = "_getMarketTradedVolume"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getMarketTradedVolume_Holder"
            self.pyclass = Holder

    class getMarketTradedVolumeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getMarketTradedVolumeResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getMarketTradedVolumeResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetMarketTradedVolumeResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getMarketTradedVolumeResponse")
            kw["aname"] = "_getMarketTradedVolumeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getMarketTradedVolumeResponse_Holder"
            self.pyclass = Holder

    class getBetHistory_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getBetHistory"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getBetHistory_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetBetHistoryReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getBetHistory")
            kw["aname"] = "_getBetHistory"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getBetHistory_Holder"
            self.pyclass = Holder

    class getBetHistoryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getBetHistoryResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getBetHistoryResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetBetHistoryResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getBetHistoryResponse")
            kw["aname"] = "_getBetHistoryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getBetHistoryResponse_Holder"
            self.pyclass = Holder

    class getAccountStatement_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAccountStatement"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getAccountStatement_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetAccountStatementReq",lazy=False)(pname=(ns,"req"), aname="_req", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getAccountStatement")
            kw["aname"] = "_getAccountStatement"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._req = None
                    return
            Holder.__name__ = "getAccountStatement_Holder"
            self.pyclass = Holder

    class getAccountStatementResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAccountStatementResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getAccountStatementResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetAccountStatementResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getAccountStatementResponse")
            kw["aname"] = "_getAccountStatementResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getAccountStatementResponse_Holder"
            self.pyclass = Holder

    class getMarketProfitAndLoss_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getMarketProfitAndLoss"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getMarketProfitAndLoss_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetMarketProfitAndLossReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getMarketProfitAndLoss")
            kw["aname"] = "_getMarketProfitAndLoss"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getMarketProfitAndLoss_Holder"
            self.pyclass = Holder

    class getMarketProfitAndLossResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getMarketProfitAndLossResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getMarketProfitAndLossResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetMarketProfitAndLossResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getMarketProfitAndLossResponse")
            kw["aname"] = "_getMarketProfitAndLossResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getMarketProfitAndLossResponse_Holder"
            self.pyclass = Holder

    class getBet_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getBet"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getBet_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetBetReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getBet")
            kw["aname"] = "_getBet"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getBet_Holder"
            self.pyclass = Holder

    class getBetResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getBetResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getBetResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetBetResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getBetResponse")
            kw["aname"] = "_getBetResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getBetResponse_Holder"
            self.pyclass = Holder

    class getBetLite_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getBetLite"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getBetLite_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetBetLiteReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getBetLite")
            kw["aname"] = "_getBetLite"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getBetLite_Holder"
            self.pyclass = Holder

    class getBetLiteResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getBetLiteResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getBetLiteResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetBetLiteResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getBetLiteResponse")
            kw["aname"] = "_getBetLiteResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getBetLiteResponse_Holder"
            self.pyclass = Holder

    class getBetMatchesLite_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getBetMatchesLite"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getBetMatchesLite_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetBetMatchesLiteReq",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getBetMatchesLite")
            kw["aname"] = "_getBetMatchesLite"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getBetMatchesLite_Holder"
            self.pyclass = Holder

    class getBetMatchesLiteResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getBetMatchesLiteResponse"
        schema = "http://www.betfair.com/publicapi/v5/BFExchangeService/"
        def __init__(self, **kw):
            ns = ns1.getBetMatchesLiteResponse_Dec.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetBetMatchesLiteResp",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.betfair.com/publicapi/v5/BFExchangeService/","getBetMatchesLiteResponse")
            kw["aname"] = "_getBetMatchesLiteResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "getBetMatchesLiteResponse_Holder"
            self.pyclass = Holder

# end class ns1 (tns: http://www.betfair.com/publicapi/v5/BFExchangeService/)

##############################
# targetNamespace
# http://www.betfair.com/publicapi/types/exchange/v5/
##############################

class bfe:
    targetNamespace = "http://www.betfair.com/publicapi/types/exchange/v5/"

    class APIResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "APIResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.APIResponse_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","APIResponseHeader",lazy=False)(pname="header", aname="_header", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._header = None
                    return
            Holder.__name__ = "APIResponse_Holder"
            self.pyclass = Holder

    class APIResponseHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "APIResponseHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.APIResponseHeader_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","APIErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sessionToken", aname="_sessionToken", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="timestamp", aname="_timestamp", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._errorCode = None
                    self._minorErrorCode = None
                    self._sessionToken = None
                    self._timestamp = None
                    return
            Holder.__name__ = "APIResponseHeader_Holder"
            self.pyclass = Holder

    class APIErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "APIErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class APIRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "APIRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.APIRequest_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","APIRequestHeader",lazy=False)(pname="header", aname="_header", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._header = None
                    return
            Holder.__name__ = "APIRequest_Holder"
            self.pyclass = Holder

    class APIRequestHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "APIRequestHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.APIRequestHeader_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="clientStamp", aname="_clientStamp", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sessionToken", aname="_sessionToken", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._clientStamp = None
                    self._sessionToken = None
                    return
            Holder.__name__ = "APIRequestHeader_Holder"
            self.pyclass = Holder

    class GetAccountFundsResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetAccountFundsResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetAccountFundsResp_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname="availBalance", aname="_availBalance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="balance", aname="_balance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="commissionRetain", aname="_commissionRetain", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="creditLimit", aname="_creditLimit", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="currentBetfairPoints", aname="_currentBetfairPoints", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="expoLimit", aname="_expoLimit", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="exposure", aname="_exposure", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="holidaysAvailable", aname="_holidaysAvailable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="nextDiscount", aname="_nextDiscount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="withdrawBalance", aname="_withdrawBalance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetAccountFundsErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.GetAccountFundsResp_Def.__bases__:
                bases = list(bfe.GetAccountFundsResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.GetAccountFundsResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetAccountFundsErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetAccountFundsErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GetAccountFundsReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetAccountFundsReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetAccountFundsReq_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.GetAccountFundsReq_Def.__bases__:
                bases = list(bfe.GetAccountFundsReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.GetAccountFundsReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetSilksResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetSilksResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetSilksResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetSilksErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfMarketDisplayDetail",lazy=False)(pname="marketDisplayDetails", aname="_marketDisplayDetails", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.GetSilksResp_Def.__bases__:
                bases = list(bfe.GetSilksResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.GetSilksResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MarketDisplayDetail_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "MarketDisplayDetail")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.MarketDisplayDetail_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfRacingSilk",lazy=False)(pname="racingSilks", aname="_racingSilks", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","MarketDisplayErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._marketId = None
                    self._racingSilks = None
                    self._errorCode = None
                    return
            Holder.__name__ = "MarketDisplayDetail_Holder"
            self.pyclass = Holder

    class ArrayOfMarketDisplayDetail_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfMarketDisplayDetail")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfMarketDisplayDetail_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","MarketDisplayDetail",lazy=False)(pname=(ns,"MarketDisplayDetail"), aname="_MarketDisplayDetail", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MarketDisplayDetail = []
                    return
            Holder.__name__ = "ArrayOfMarketDisplayDetail_Holder"
            self.pyclass = Holder

    class RacingSilk_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "RacingSilk")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.RacingSilk_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="selectionId", aname="_selectionId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="silksURL", aname="_silksURL", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="silksText", aname="_silksText", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="trainerName", aname="_trainerName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ageWeight", aname="_ageWeight", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="form", aname="_form", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="daysSince", aname="_daysSince", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="jockeyClaim", aname="_jockeyClaim", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="wearing", aname="_wearing", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="saddleCloth", aname="_saddleCloth", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="stallDraw", aname="_stallDraw", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._selectionId = None
                    self._silksURL = None
                    self._silksText = None
                    self._trainerName = None
                    self._ageWeight = None
                    self._form = None
                    self._daysSince = None
                    self._jockeyClaim = None
                    self._wearing = None
                    self._saddleCloth = None
                    self._stallDraw = None
                    return
            Holder.__name__ = "RacingSilk_Holder"
            self.pyclass = Holder

    class ArrayOfRacingSilk_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfRacingSilk")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfRacingSilk_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","RacingSilk",lazy=False)(pname=(ns,"RacingSilk"), aname="_RacingSilk", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RacingSilk = []
                    return
            Holder.__name__ = "ArrayOfRacingSilk_Holder"
            self.pyclass = Holder

    class GetSilksErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetSilksErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MarketDisplayErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "MarketDisplayErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GetSilksReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetSilksReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetSilksReq_Def.schema
            TClist = [ZSI.TC.String(pname="locale", aname="_locale", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfInt",lazy=False)(pname="markets", aname="_markets", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.GetSilksReq_Def.__bases__:
                bases = list(bfe.GetSilksReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.GetSilksReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetSilksV2Resp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetSilksV2Resp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetSilksV2Resp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetSilksErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfMarketDisplayDetailV2",lazy=False)(pname="marketDisplayDetails", aname="_marketDisplayDetails", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.GetSilksV2Resp_Def.__bases__:
                bases = list(bfe.GetSilksV2Resp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.GetSilksV2Resp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MarketDisplayDetailV2_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "MarketDisplayDetailV2")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.MarketDisplayDetailV2_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfRacingSilkV2",lazy=False)(pname="racingSilks", aname="_racingSilks", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","MarketDisplayErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._marketId = None
                    self._racingSilks = None
                    self._errorCode = None
                    return
            Holder.__name__ = "MarketDisplayDetailV2_Holder"
            self.pyclass = Holder

    class ArrayOfMarketDisplayDetailV2_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfMarketDisplayDetailV2")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfMarketDisplayDetailV2_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","MarketDisplayDetailV2",lazy=False)(pname=(ns,"MarketDisplayDetail"), aname="_MarketDisplayDetail", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MarketDisplayDetail = []
                    return
            Holder.__name__ = "ArrayOfMarketDisplayDetailV2_Holder"
            self.pyclass = Holder

    class Breeding_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "Breeding")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.Breeding_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bred", aname="_bred", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="yearBorn", aname="_yearBorn", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._bred = None
                    self._yearBorn = None
                    return
            Holder.__name__ = "Breeding_Holder"
            self.pyclass = Holder

    class RacingSilkV2_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "RacingSilkV2")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.RacingSilkV2_Def.schema
            TClist = [ZSI.TC.String(pname="ownerName", aname="_ownerName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="jockeyName", aname="_jockeyName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="colour", aname="_colour", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sex", aname="_sex", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bred", aname="_bred", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="forecastPriceNumerator", aname="_forecastPriceNumerator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="forecastPriceDenominator", aname="_forecastPriceDenominator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="officialRating", aname="_officialRating", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","Breeding",lazy=False)(pname="sire", aname="_sire", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","Breeding",lazy=False)(pname="dam", aname="_dam", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","Breeding",lazy=False)(pname="damSire", aname="_damSire", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.RacingSilk_Def not in bfe.RacingSilkV2_Def.__bases__:
                bases = list(bfe.RacingSilkV2_Def.__bases__)
                bases.insert(0, bfe.RacingSilk_Def)
                bfe.RacingSilkV2_Def.__bases__ = tuple(bases)

            bfe.RacingSilk_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ArrayOfRacingSilkV2_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfRacingSilkV2")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfRacingSilkV2_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","RacingSilkV2",lazy=False)(pname=(ns,"RacingSilk"), aname="_RacingSilk", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RacingSilk = []
                    return
            Holder.__name__ = "ArrayOfRacingSilkV2_Holder"
            self.pyclass = Holder

    class GetSilksV2Req_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetSilksV2Req")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetSilksV2Req_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.GetSilksReq_Def not in bfe.GetSilksV2Req_Def.__bases__:
                bases = list(bfe.GetSilksV2Req_Def.__bases__)
                bases.insert(0, bfe.GetSilksReq_Def)
                bfe.GetSilksV2Req_Def.__bases__ = tuple(bases)

            bfe.GetSilksReq_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CancelBetsResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "CancelBetsResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.CancelBetsResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfCancelBetsResult",lazy=False)(pname="betResults", aname="_betResults", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","CancelBetsErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.CancelBetsResp_Def.__bases__:
                bases = list(bfe.CancelBetsResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.CancelBetsResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CancelBetsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "CancelBetsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.CancelBetsResult_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="betId", aname="_betId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","CancelBetsResultEnum",lazy=False)(pname="resultCode", aname="_resultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="sizeCancelled", aname="_sizeCancelled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="sizeMatched", aname="_sizeMatched", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="success", aname="_success", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._betId = None
                    self._resultCode = None
                    self._sizeCancelled = None
                    self._sizeMatched = None
                    self._success = None
                    return
            Holder.__name__ = "CancelBetsResult_Holder"
            self.pyclass = Holder

    class CancelBetsResultEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "CancelBetsResultEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ArrayOfCancelBetsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfCancelBetsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfCancelBetsResult_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","CancelBetsResult",lazy=False)(pname=(ns,"CancelBetsResult"), aname="_CancelBetsResult", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CancelBetsResult = []
                    return
            Holder.__name__ = "ArrayOfCancelBetsResult_Holder"
            self.pyclass = Holder

    class CancelBetsErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "CancelBetsErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CancelBetsReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "CancelBetsReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.CancelBetsReq_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfCancelBets",lazy=False)(pname="bets", aname="_bets", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.CancelBetsReq_Def.__bases__:
                bases = list(bfe.CancelBetsReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.CancelBetsReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CancelBets_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "CancelBets")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.CancelBets_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="betId", aname="_betId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._betId = None
                    return
            Holder.__name__ = "CancelBets_Holder"
            self.pyclass = Holder

    class ArrayOfCancelBets_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfCancelBets")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfCancelBets_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","CancelBets",lazy=False)(pname=(ns,"CancelBets"), aname="_CancelBets", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CancelBets = []
                    return
            Holder.__name__ = "ArrayOfCancelBets_Holder"
            self.pyclass = Holder

    class CancelBetsByMarketReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "CancelBetsByMarketReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.CancelBetsByMarketReq_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfInt",lazy=False)(pname="markets", aname="_markets", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.CancelBetsByMarketReq_Def.__bases__:
                bases = list(bfe.CancelBetsByMarketReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.CancelBetsByMarketReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CancelBetsByMarketResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "CancelBetsByMarketResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.CancelBetsByMarketResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfCancelBetsByMarketResult",lazy=False)(pname="results", aname="_results", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","CancelBetsByMarketErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.CancelBetsByMarketResp_Def.__bases__:
                bases = list(bfe.CancelBetsByMarketResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.CancelBetsByMarketResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CancelBetsByMarketErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "CancelBetsByMarketErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ArrayOfCancelBetsByMarketResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfCancelBetsByMarketResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfCancelBetsByMarketResult_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","CancelBetsByMarketResult",lazy=False)(pname=(ns,"CancelBetsByMarketResult"), aname="_CancelBetsByMarketResult", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CancelBetsByMarketResult = []
                    return
            Holder.__name__ = "ArrayOfCancelBetsByMarketResult_Holder"
            self.pyclass = Holder

    class CancelBetsByMarketResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "CancelBetsByMarketResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.CancelBetsByMarketResult_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","CancelBetsByMarketResultEnum",lazy=False)(pname="resultCode", aname="_resultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._marketId = None
                    self._resultCode = None
                    return
            Holder.__name__ = "CancelBetsByMarketResult_Holder"
            self.pyclass = Holder

    class CancelBetsByMarketResultEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "CancelBetsByMarketResultEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class UpdateBetsResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "UpdateBetsResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.UpdateBetsResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfUpdateBetsResult",lazy=False)(pname="betResults", aname="_betResults", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","UpdateBetsErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.UpdateBetsResp_Def.__bases__:
                bases = list(bfe.UpdateBetsResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.UpdateBetsResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UpdateBetsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "UpdateBetsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.UpdateBetsResult_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="betId", aname="_betId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="newBetId", aname="_newBetId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="sizeCancelled", aname="_sizeCancelled", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="newSize", aname="_newSize", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="newPrice", aname="_newPrice", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","UpdateBetsResultEnum",lazy=False)(pname="resultCode", aname="_resultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="success", aname="_success", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._betId = None
                    self._newBetId = None
                    self._sizeCancelled = None
                    self._newSize = None
                    self._newPrice = None
                    self._resultCode = None
                    self._success = None
                    return
            Holder.__name__ = "UpdateBetsResult_Holder"
            self.pyclass = Holder

    class UpdateBetsResultEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "UpdateBetsResultEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ArrayOfUpdateBetsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfUpdateBetsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfUpdateBetsResult_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","UpdateBetsResult",lazy=False)(pname=(ns,"UpdateBetsResult"), aname="_UpdateBetsResult", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._UpdateBetsResult = []
                    return
            Holder.__name__ = "ArrayOfUpdateBetsResult_Holder"
            self.pyclass = Holder

    class UpdateBetsErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "UpdateBetsErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class UpdateBetsReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "UpdateBetsReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.UpdateBetsReq_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfUpdateBets",lazy=False)(pname="bets", aname="_bets", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.UpdateBetsReq_Def.__bases__:
                bases = list(bfe.UpdateBetsReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.UpdateBetsReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UpdateBets_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "UpdateBets")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.UpdateBets_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="betId", aname="_betId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="newPrice", aname="_newPrice", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="newSize", aname="_newSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="oldPrice", aname="_oldPrice", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="oldSize", aname="_oldSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetPersistenceTypeEnum",lazy=False)(pname="oldBetPersistenceType", aname="_oldBetPersistenceType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetPersistenceTypeEnum",lazy=False)(pname="newBetPersistenceType", aname="_newBetPersistenceType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._betId = None
                    self._newPrice = None
                    self._newSize = None
                    self._oldPrice = None
                    self._oldSize = None
                    self._oldBetPersistenceType = None
                    self._newBetPersistenceType = None
                    return
            Holder.__name__ = "UpdateBets_Holder"
            self.pyclass = Holder

    class ArrayOfUpdateBets_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfUpdateBets")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfUpdateBets_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","UpdateBets",lazy=False)(pname=(ns,"UpdateBets"), aname="_UpdateBets", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._UpdateBets = []
                    return
            Holder.__name__ = "ArrayOfUpdateBets_Holder"
            self.pyclass = Holder

    class PlaceBetsResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "PlaceBetsResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.PlaceBetsResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfPlaceBetsResult",lazy=False)(pname="betResults", aname="_betResults", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","PlaceBetsErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.PlaceBetsResp_Def.__bases__:
                bases = list(bfe.PlaceBetsResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.PlaceBetsResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PlaceBetsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "PlaceBetsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.PlaceBetsResult_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname="averagePriceMatched", aname="_averagePriceMatched", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="betId", aname="_betId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","PlaceBetsResultEnum",lazy=False)(pname="resultCode", aname="_resultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="sizeMatched", aname="_sizeMatched", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="success", aname="_success", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._averagePriceMatched = None
                    self._betId = None
                    self._resultCode = None
                    self._sizeMatched = None
                    self._success = None
                    return
            Holder.__name__ = "PlaceBetsResult_Holder"
            self.pyclass = Holder

    class PlaceBetsErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "PlaceBetsErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PlaceBetsResultEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "PlaceBetsResultEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ArrayOfPlaceBetsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfPlaceBetsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfPlaceBetsResult_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","PlaceBetsResult",lazy=False)(pname=(ns,"PlaceBetsResult"), aname="_PlaceBetsResult", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._PlaceBetsResult = []
                    return
            Holder.__name__ = "ArrayOfPlaceBetsResult_Holder"
            self.pyclass = Holder

    class PlaceBetsReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "PlaceBetsReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.PlaceBetsReq_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfPlaceBets",lazy=False)(pname="bets", aname="_bets", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.PlaceBetsReq_Def.__bases__:
                bases = list(bfe.PlaceBetsReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.PlaceBetsReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PlaceBets_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "PlaceBets")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.PlaceBets_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="asianLineId", aname="_asianLineId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetTypeEnum",lazy=False)(pname="betType", aname="_betType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetCategoryTypeEnum",lazy=False)(pname="betCategoryType", aname="_betCategoryType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetPersistenceTypeEnum",lazy=False)(pname="betPersistenceType", aname="_betPersistenceType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="price", aname="_price", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="selectionId", aname="_selectionId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="size", aname="_size", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="bspLiability", aname="_bspLiability", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._asianLineId = None
                    self._betType = None
                    self._betCategoryType = None
                    self._betPersistenceType = None
                    self._marketId = None
                    self._price = None
                    self._selectionId = None
                    self._size = None
                    self._bspLiability = None
                    return
            Holder.__name__ = "PlaceBets_Holder"
            self.pyclass = Holder

    class BetTypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "BetTypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ArrayOfPlaceBets_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfPlaceBets")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfPlaceBets_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","PlaceBets",lazy=False)(pname=(ns,"PlaceBets"), aname="_PlaceBets", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._PlaceBets = []
                    return
            Holder.__name__ = "ArrayOfPlaceBets_Holder"
            self.pyclass = Holder

    class MarketTypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "MarketTypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MarketTypeVariantEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "MarketTypeVariantEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GetCouponResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetCouponResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetCouponResp_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="couponId", aname="_couponId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="couponName", aname="_couponName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfCouponMarket",lazy=False)(pname="couponMarketItems", aname="_couponMarketItems", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="parentEventId", aname="_parentEventId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetCouponErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.GetCouponResp_Def.__bases__:
                bases = list(bfe.GetCouponResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.GetCouponResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetCouponErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetCouponErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CouponMarket_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "CouponMarket")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.CouponMarket_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="marketName", aname="_marketName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="exchangeId", aname="_exchangeId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="parentEventName", aname="_parentEventName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","MarketStatusEnum",lazy=False)(pname="marketStatus", aname="_marketStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","MarketTypeEnum",lazy=False)(pname="marketType", aname="_marketType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","MarketTypeVariantEnum",lazy=False)(pname="marketTypeVariant", aname="_marketTypeVariant", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="marketInfo", aname="_marketInfo", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="startTime", aname="_startTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="betDelay", aname="_betDelay", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfCouponSelection",lazy=False)(pname="couponSelectionItems", aname="_couponSelectionItems", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._marketId = None
                    self._marketName = None
                    self._exchangeId = None
                    self._parentEventName = None
                    self._marketStatus = None
                    self._marketType = None
                    self._marketTypeVariant = None
                    self._marketInfo = None
                    self._startTime = None
                    self._betDelay = None
                    self._couponSelectionItems = None
                    return
            Holder.__name__ = "CouponMarket_Holder"
            self.pyclass = Holder

    class CouponSelection_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "CouponSelection")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.CouponSelection_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","Runner",lazy=False)(pname="runner", aname="_runner", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="backOdds", aname="_backOdds", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="layOdds", aname="_layOdds", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runner = None
                    self._backOdds = None
                    self._layOdds = None
                    return
            Holder.__name__ = "CouponSelection_Holder"
            self.pyclass = Holder

    class ArrayOfCouponSelection_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfCouponSelection")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfCouponSelection_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","CouponSelection",lazy=False)(pname=(ns,"CouponSelection"), aname="_CouponSelection", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CouponSelection = []
                    return
            Holder.__name__ = "ArrayOfCouponSelection_Holder"
            self.pyclass = Holder

    class ArrayOfCouponMarket_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfCouponMarket")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfCouponMarket_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","CouponMarket",lazy=False)(pname=(ns,"CouponMarket"), aname="_CouponMarket", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CouponMarket = []
                    return
            Holder.__name__ = "ArrayOfCouponMarket_Holder"
            self.pyclass = Holder

    class GetCouponReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetCouponReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetCouponReq_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="couponId", aname="_couponId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="locale", aname="_locale", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.GetCouponReq_Def.__bases__:
                bases = list(bfe.GetCouponReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.GetCouponReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CouponLink_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "CouponLink")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.CouponLink_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="couponId", aname="_couponId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="couponName", aname="_couponName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._couponId = None
                    self._couponName = None
                    return
            Holder.__name__ = "CouponLink_Holder"
            self.pyclass = Holder

    class ArrayOfCouponLinks_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfCouponLinks")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfCouponLinks_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","CouponLink",lazy=False)(pname=(ns,"CouponLink"), aname="_CouponLink", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CouponLink = []
                    return
            Holder.__name__ = "ArrayOfCouponLinks_Holder"
            self.pyclass = Holder

    class HeartbeatReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "HeartbeatReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.HeartbeatReq_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="frequency", aname="_frequency", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.HeartbeatReq_Def.__bases__:
                bases = list(bfe.HeartbeatReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.HeartbeatReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class HeartbeatResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "HeartbeatResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.HeartbeatResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","HeartbeatErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="frequency", aname="_frequency", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.HeartbeatResp_Def.__bases__:
                bases = list(bfe.HeartbeatResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.HeartbeatResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class HeartbeatErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "HeartbeatErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GetMarketResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetMarketResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetMarketResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetMarketErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","Market",lazy=False)(pname="market", aname="_market", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.GetMarketResp_Def.__bases__:
                bases = list(bfe.GetMarketResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.GetMarketResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetMarketErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetMarketErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Market_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "Market")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.Market_Def.schema
            TClist = [ZSI.TC.String(pname="countryISO3", aname="_countryISO3", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="discountAllowed", aname="_discountAllowed", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="eventTypeId", aname="_eventTypeId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="lastRefresh", aname="_lastRefresh", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname="marketBaseRate", aname="_marketBaseRate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="marketDescription", aname="_marketDescription", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="marketDescriptionHasDate", aname="_marketDescriptionHasDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="marketDisplayTime", aname="_marketDisplayTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","MarketStatusEnum",lazy=False)(pname="marketStatus", aname="_marketStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="marketSuspendTime", aname="_marketSuspendTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="marketTime", aname="_marketTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","MarketTypeEnum",lazy=False)(pname="marketType", aname="_marketType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","MarketTypeVariantEnum",lazy=False)(pname="marketTypeVariant", aname="_marketTypeVariant", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="menuPath", aname="_menuPath", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfEventId",lazy=False)(pname="eventHierarchy", aname="_eventHierarchy", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="numberOfWinners", aname="_numberOfWinners", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="parentEventId", aname="_parentEventId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfRunner",lazy=False)(pname="runners", aname="_runners", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="unit", aname="_unit", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="maxUnitValue", aname="_maxUnitValue", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="minUnitValue", aname="_minUnitValue", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="interval", aname="_interval", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="runnersMayBeAdded", aname="_runnersMayBeAdded", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="timezone", aname="_timezone", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="licenceId", aname="_licenceId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfCouponLinks",lazy=False)(pname="couponLinks", aname="_couponLinks", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="bspMarket", aname="_bspMarket", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._countryISO3 = None
                    self._discountAllowed = None
                    self._eventTypeId = None
                    self._lastRefresh = None
                    self._marketBaseRate = None
                    self._marketDescription = None
                    self._marketDescriptionHasDate = None
                    self._marketDisplayTime = None
                    self._marketId = None
                    self._marketStatus = None
                    self._marketSuspendTime = None
                    self._marketTime = None
                    self._marketType = None
                    self._marketTypeVariant = None
                    self._menuPath = None
                    self._eventHierarchy = None
                    self._name = None
                    self._numberOfWinners = None
                    self._parentEventId = None
                    self._runners = None
                    self._unit = None
                    self._maxUnitValue = None
                    self._minUnitValue = None
                    self._interval = None
                    self._runnersMayBeAdded = None
                    self._timezone = None
                    self._licenceId = None
                    self._couponLinks = None
                    self._bspMarket = None
                    return
            Holder.__name__ = "Market_Holder"
            self.pyclass = Holder

    class MarketStatusEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "MarketStatusEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ArrayOfEventId_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfEventId")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfEventId_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"EventId"), aname="_EventId", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._EventId = []
                    return
            Holder.__name__ = "ArrayOfEventId_Holder"
            self.pyclass = Holder

    class Runner_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "Runner")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.Runner_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="asianLineId", aname="_asianLineId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="handicap", aname="_handicap", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="selectionId", aname="_selectionId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._asianLineId = None
                    self._handicap = None
                    self._name = None
                    self._selectionId = None
                    return
            Holder.__name__ = "Runner_Holder"
            self.pyclass = Holder

    class ArrayOfRunner_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfRunner")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfRunner_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","Runner",lazy=False)(pname=(ns,"Runner"), aname="_Runner", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Runner = []
                    return
            Holder.__name__ = "ArrayOfRunner_Holder"
            self.pyclass = Holder

    class GetMarketReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetMarketReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetMarketReq_Def.schema
            TClist = [ZSI.TC.String(pname="locale", aname="_locale", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="includeCouponLinks", aname="_includeCouponLinks", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.GetMarketReq_Def.__bases__:
                bases = list(bfe.GetMarketReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.GetMarketReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetMarketPricesResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetMarketPricesResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetMarketPricesResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetMarketPricesErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","MarketPrices",lazy=False)(pname="marketPrices", aname="_marketPrices", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.GetMarketPricesResp_Def.__bases__:
                bases = list(bfe.GetMarketPricesResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.GetMarketPricesResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetMarketPricesErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetMarketPricesErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MarketPrices_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "MarketPrices")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.MarketPrices_Def.schema
            TClist = [ZSI.TC.String(pname="currencyCode", aname="_currencyCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="delay", aname="_delay", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="discountAllowed", aname="_discountAllowed", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="lastRefresh", aname="_lastRefresh", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname="marketBaseRate", aname="_marketBaseRate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="marketInfo", aname="_marketInfo", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="removedRunners", aname="_removedRunners", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","MarketStatusEnum",lazy=False)(pname="marketStatus", aname="_marketStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="numberOfWinners", aname="_numberOfWinners", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="bspMarket", aname="_bspMarket", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfRunnerPrices",lazy=False)(pname="runnerPrices", aname="_runnerPrices", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._currencyCode = None
                    self._delay = None
                    self._discountAllowed = None
                    self._lastRefresh = None
                    self._marketBaseRate = None
                    self._marketId = None
                    self._marketInfo = None
                    self._removedRunners = None
                    self._marketStatus = None
                    self._numberOfWinners = None
                    self._bspMarket = None
                    self._runnerPrices = None
                    return
            Holder.__name__ = "MarketPrices_Holder"
            self.pyclass = Holder

    class RunnerPrices_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "RunnerPrices")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.RunnerPrices_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="asianLineId", aname="_asianLineId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfPrice",lazy=False)(pname="bestPricesToBack", aname="_bestPricesToBack", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfPrice",lazy=False)(pname="bestPricesToLay", aname="_bestPricesToLay", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="handicap", aname="_handicap", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="lastPriceMatched", aname="_lastPriceMatched", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="reductionFactor", aname="_reductionFactor", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="selectionId", aname="_selectionId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="sortOrder", aname="_sortOrder", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="totalAmountMatched", aname="_totalAmountMatched", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="vacant", aname="_vacant", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="farBSP", aname="_farBSP", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="nearBSP", aname="_nearBSP", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="actualBSP", aname="_actualBSP", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._asianLineId = None
                    self._bestPricesToBack = None
                    self._bestPricesToLay = None
                    self._handicap = None
                    self._lastPriceMatched = None
                    self._reductionFactor = None
                    self._selectionId = None
                    self._sortOrder = None
                    self._totalAmountMatched = None
                    self._vacant = None
                    self._farBSP = None
                    self._nearBSP = None
                    self._actualBSP = None
                    return
            Holder.__name__ = "RunnerPrices_Holder"
            self.pyclass = Holder

    class Price_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "Price")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.Price_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname="amountAvailable", aname="_amountAvailable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetTypeEnum",lazy=False)(pname="betType", aname="_betType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="depth", aname="_depth", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="price", aname="_price", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._amountAvailable = None
                    self._betType = None
                    self._depth = None
                    self._price = None
                    return
            Holder.__name__ = "Price_Holder"
            self.pyclass = Holder

    class ArrayOfPrice_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfPrice")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfPrice_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","Price",lazy=False)(pname=(ns,"Price"), aname="_Price", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Price = []
                    return
            Holder.__name__ = "ArrayOfPrice_Holder"
            self.pyclass = Holder

    class ArrayOfRunnerPrices_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfRunnerPrices")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfRunnerPrices_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","RunnerPrices",lazy=False)(pname=(ns,"RunnerPrices"), aname="_RunnerPrices", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RunnerPrices = []
                    return
            Holder.__name__ = "ArrayOfRunnerPrices_Holder"
            self.pyclass = Holder

    class GetMarketPricesReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetMarketPricesReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetMarketPricesReq_Def.schema
            TClist = [ZSI.TC.String(pname="currencyCode", aname="_currencyCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.GetMarketPricesReq_Def.__bases__:
                bases = list(bfe.GetMarketPricesReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.GetMarketPricesReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetAllMarketsResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetAllMarketsResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetAllMarketsResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetAllMarketsErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="marketData", aname="_marketData", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.GetAllMarketsResp_Def.__bases__:
                bases = list(bfe.GetAllMarketsResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.GetAllMarketsResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetAllMarketsReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetAllMarketsReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetAllMarketsReq_Def.schema
            TClist = [ZSI.TC.String(pname="locale", aname="_locale", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfInt",lazy=False)(pname="eventTypeIds", aname="_eventTypeIds", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfCountryCode",lazy=False)(pname="countries", aname="_countries", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="fromDate", aname="_fromDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="toDate", aname="_toDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.GetAllMarketsReq_Def.__bases__:
                bases = list(bfe.GetAllMarketsReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.GetAllMarketsReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ArrayOfCountryCode_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfCountryCode")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfCountryCode_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Country"), aname="_Country", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Country = []
                    return
            Holder.__name__ = "ArrayOfCountryCode_Holder"
            self.pyclass = Holder

    class GetAllMarketsErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetAllMarketsErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GetInPlayMarketsResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetInPlayMarketsResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetInPlayMarketsResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetInPlayMarketsErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="marketData", aname="_marketData", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.GetInPlayMarketsResp_Def.__bases__:
                bases = list(bfe.GetInPlayMarketsResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.GetInPlayMarketsResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetInPlayMarketsReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetInPlayMarketsReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetInPlayMarketsReq_Def.schema
            TClist = [ZSI.TC.String(pname="locale", aname="_locale", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.GetInPlayMarketsReq_Def.__bases__:
                bases = list(bfe.GetInPlayMarketsReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.GetInPlayMarketsReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetInPlayMarketsErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetInPlayMarketsErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GetPrivateMarketsResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetPrivateMarketsResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetPrivateMarketsResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetPrivateMarketsErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfPrivateMarket",lazy=False)(pname="privateMarkets", aname="_privateMarkets", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="lastRefresh", aname="_lastRefresh", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.GetPrivateMarketsResp_Def.__bases__:
                bases = list(bfe.GetPrivateMarketsResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.GetPrivateMarketsResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetPrivateMarketsReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetPrivateMarketsReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetPrivateMarketsReq_Def.schema
            TClist = [ZSI.TC.String(pname="locale", aname="_locale", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="eventTypeId", aname="_eventTypeId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","MarketTypeEnum",lazy=False)(pname="marketType", aname="_marketType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.GetPrivateMarketsReq_Def.__bases__:
                bases = list(bfe.GetPrivateMarketsReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.GetPrivateMarketsReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetPrivateMarketsErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetPrivateMarketsErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PrivateMarket_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "PrivateMarket")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.PrivateMarket_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="menuPath", aname="_menuPath", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfEventId",lazy=False)(pname="eventHierarchy", aname="_eventHierarchy", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._marketId = None
                    self._menuPath = None
                    self._eventHierarchy = None
                    return
            Holder.__name__ = "PrivateMarket_Holder"
            self.pyclass = Holder

    class ArrayOfPrivateMarket_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfPrivateMarket")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfPrivateMarket_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","PrivateMarket",lazy=False)(pname=(ns,"PrivateMarket"), aname="_PrivateMarket", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._PrivateMarket = []
                    return
            Holder.__name__ = "ArrayOfPrivateMarket_Holder"
            self.pyclass = Holder

    class GetCompleteMarketPricesCompressedResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetCompleteMarketPricesCompressedResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetCompleteMarketPricesCompressedResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetCompleteMarketPricesErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="completeMarketPrices", aname="_completeMarketPrices", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="currencyCode", aname="_currencyCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.GetCompleteMarketPricesCompressedResp_Def.__bases__:
                bases = list(bfe.GetCompleteMarketPricesCompressedResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.GetCompleteMarketPricesCompressedResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetCompleteMarketPricesCompressedReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetCompleteMarketPricesCompressedReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetCompleteMarketPricesCompressedReq_Def.schema
            TClist = [ZSI.TC.String(pname="currencyCode", aname="_currencyCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.GetCompleteMarketPricesCompressedReq_Def.__bases__:
                bases = list(bfe.GetCompleteMarketPricesCompressedReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.GetCompleteMarketPricesCompressedReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetCompleteMarketPricesErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetCompleteMarketPricesErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GetMarketTradedVolumeCompressedResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetMarketTradedVolumeCompressedResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetMarketTradedVolumeCompressedResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetMarketTradedVolumeCompressedErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tradedVolume", aname="_tradedVolume", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="currencyCode", aname="_currencyCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.GetMarketTradedVolumeCompressedResp_Def.__bases__:
                bases = list(bfe.GetMarketTradedVolumeCompressedResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.GetMarketTradedVolumeCompressedResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetMarketTradedVolumeCompressedReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetMarketTradedVolumeCompressedReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetMarketTradedVolumeCompressedReq_Def.schema
            TClist = [ZSI.TC.String(pname="currencyCode", aname="_currencyCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.GetMarketTradedVolumeCompressedReq_Def.__bases__:
                bases = list(bfe.GetMarketTradedVolumeCompressedReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.GetMarketTradedVolumeCompressedReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetMarketTradedVolumeCompressedErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetMarketTradedVolumeCompressedErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GetMarketPricesCompressedResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetMarketPricesCompressedResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetMarketPricesCompressedResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetMarketPricesErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="marketPrices", aname="_marketPrices", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.GetMarketPricesCompressedResp_Def.__bases__:
                bases = list(bfe.GetMarketPricesCompressedResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.GetMarketPricesCompressedResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetMarketPricesCompressedReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetMarketPricesCompressedReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetMarketPricesCompressedReq_Def.schema
            TClist = [ZSI.TC.String(pname="currencyCode", aname="_currencyCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.GetMarketPricesCompressedReq_Def.__bases__:
                bases = list(bfe.GetMarketPricesCompressedReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.GetMarketPricesCompressedReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetCurrentBetsResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetCurrentBetsResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetCurrentBetsResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfBet",lazy=False)(pname="bets", aname="_bets", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetCurrentBetsErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="totalRecordCount", aname="_totalRecordCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.GetCurrentBetsResp_Def.__bases__:
                bases = list(bfe.GetCurrentBetsResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.GetCurrentBetsResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetMUBetsResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetMUBetsResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetMUBetsResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfMUBet",lazy=False)(pname="bets", aname="_bets", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetMUBetsErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="totalRecordCount", aname="_totalRecordCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.GetMUBetsResp_Def.__bases__:
                bases = list(bfe.GetMUBetsResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.GetMUBetsResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetMUBetsErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetMUBetsErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MUBet_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "MUBet")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.MUBet_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="asianLineId", aname="_asianLineId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="betId", aname="_betId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="transactionId", aname="_transactionId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetStatusEnum",lazy=False)(pname="betStatus", aname="_betStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetTypeEnum",lazy=False)(pname="betType", aname="_betType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetCategoryTypeEnum",lazy=False)(pname="betCategoryType", aname="_betCategoryType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetPersistenceTypeEnum",lazy=False)(pname="betPersistenceType", aname="_betPersistenceType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="matchedDate", aname="_matchedDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="size", aname="_size", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="bspLiability", aname="_bspLiability", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="placedDate", aname="_placedDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="price", aname="_price", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="selectionId", aname="_selectionId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="handicap", aname="_handicap", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._asianLineId = None
                    self._betId = None
                    self._transactionId = None
                    self._betStatus = None
                    self._betType = None
                    self._betCategoryType = None
                    self._betPersistenceType = None
                    self._marketId = None
                    self._matchedDate = None
                    self._size = None
                    self._bspLiability = None
                    self._placedDate = None
                    self._price = None
                    self._selectionId = None
                    self._handicap = None
                    return
            Holder.__name__ = "MUBet_Holder"
            self.pyclass = Holder

    class ArrayOfMUBet_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfMUBet")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfMUBet_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","MUBet",lazy=False)(pname=(ns,"MUBet"), aname="_MUBet", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MUBet = []
                    return
            Holder.__name__ = "ArrayOfMUBet_Holder"
            self.pyclass = Holder

    class GetMUBetsReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetMUBetsReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetMUBetsReq_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetStatusEnum",lazy=False)(pname="betStatus", aname="_betStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfBetId",lazy=False)(pname="betIds", aname="_betIds", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetsOrderByEnum",lazy=False)(pname="orderBy", aname="_orderBy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","SortOrderEnum",lazy=False)(pname="sortOrder", aname="_sortOrder", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="recordCount", aname="_recordCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="startRecord", aname="_startRecord", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="matchedSince", aname="_matchedSince", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="excludeLastSecond", aname="_excludeLastSecond", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.GetMUBetsReq_Def.__bases__:
                bases = list(bfe.GetMUBetsReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.GetMUBetsReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SortOrderEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "SortOrderEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ArrayOfBetId_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfBetId")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfBetId_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"betId"), aname="_betId", minOccurs=0, maxOccurs=1000, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._betId = []
                    return
            Holder.__name__ = "ArrayOfBetId_Holder"
            self.pyclass = Holder

    class Bet_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "Bet")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.Bet_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="asianLineId", aname="_asianLineId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="avgPrice", aname="_avgPrice", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="betId", aname="_betId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetStatusEnum",lazy=False)(pname="betStatus", aname="_betStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetTypeEnum",lazy=False)(pname="betType", aname="_betType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetCategoryTypeEnum",lazy=False)(pname="betCategoryType", aname="_betCategoryType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetPersistenceTypeEnum",lazy=False)(pname="betPersistenceType", aname="_betPersistenceType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="cancelledDate", aname="_cancelledDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="lapsedDate", aname="_lapsedDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="marketName", aname="_marketName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="fullMarketName", aname="_fullMarketName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","MarketTypeEnum",lazy=False)(pname="marketType", aname="_marketType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","MarketTypeVariantEnum",lazy=False)(pname="marketTypeVariant", aname="_marketTypeVariant", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="matchedDate", aname="_matchedDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="matchedSize", aname="_matchedSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfMatch",lazy=False)(pname="matches", aname="_matches", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="placedDate", aname="_placedDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="price", aname="_price", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="bspLiability", aname="_bspLiability", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="profitAndLoss", aname="_profitAndLoss", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="selectionId", aname="_selectionId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="selectionName", aname="_selectionName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="settledDate", aname="_settledDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="remainingSize", aname="_remainingSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="requestedSize", aname="_requestedSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="voidedDate", aname="_voidedDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="handicap", aname="_handicap", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._asianLineId = None
                    self._avgPrice = None
                    self._betId = None
                    self._betStatus = None
                    self._betType = None
                    self._betCategoryType = None
                    self._betPersistenceType = None
                    self._cancelledDate = None
                    self._lapsedDate = None
                    self._marketId = None
                    self._marketName = None
                    self._fullMarketName = None
                    self._marketType = None
                    self._marketTypeVariant = None
                    self._matchedDate = None
                    self._matchedSize = None
                    self._matches = None
                    self._placedDate = None
                    self._price = None
                    self._bspLiability = None
                    self._profitAndLoss = None
                    self._selectionId = None
                    self._selectionName = None
                    self._settledDate = None
                    self._remainingSize = None
                    self._requestedSize = None
                    self._voidedDate = None
                    self._handicap = None
                    return
            Holder.__name__ = "Bet_Holder"
            self.pyclass = Holder

    class BetStatusEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "BetStatusEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class BetCategoryTypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "BetCategoryTypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class BetPersistenceTypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "BetPersistenceTypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Match_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "Match")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.Match_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetStatusEnum",lazy=False)(pname="betStatus", aname="_betStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="matchedDate", aname="_matchedDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="priceMatched", aname="_priceMatched", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="profitLoss", aname="_profitLoss", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="settledDate", aname="_settledDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="sizeMatched", aname="_sizeMatched", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="transactionId", aname="_transactionId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="voidedDate", aname="_voidedDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._betStatus = None
                    self._matchedDate = None
                    self._priceMatched = None
                    self._profitLoss = None
                    self._settledDate = None
                    self._sizeMatched = None
                    self._transactionId = None
                    self._voidedDate = None
                    return
            Holder.__name__ = "Match_Holder"
            self.pyclass = Holder

    class ArrayOfMatch_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfMatch")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfMatch_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","Match",lazy=False)(pname=(ns,"Match"), aname="_Match", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Match = []
                    return
            Holder.__name__ = "ArrayOfMatch_Holder"
            self.pyclass = Holder

    class ArrayOfBet_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfBet")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfBet_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","Bet",lazy=False)(pname=(ns,"Bet"), aname="_Bet", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Bet = []
                    return
            Holder.__name__ = "ArrayOfBet_Holder"
            self.pyclass = Holder

    class GetCurrentBetsErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetCurrentBetsErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GetCurrentBetsReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetCurrentBetsReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetCurrentBetsReq_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetStatusEnum",lazy=False)(pname="betStatus", aname="_betStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="detailed", aname="_detailed", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="locale", aname="_locale", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="timezone", aname="_timezone", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetsOrderByEnum",lazy=False)(pname="orderBy", aname="_orderBy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="recordCount", aname="_recordCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="startRecord", aname="_startRecord", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="noTotalRecordCount", aname="_noTotalRecordCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.GetCurrentBetsReq_Def.__bases__:
                bases = list(bfe.GetCurrentBetsReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.GetCurrentBetsReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BetsOrderByEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "BetsOrderByEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GetDetailedAvailableMktDepthResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetDetailedAvailableMktDepthResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetDetailedAvailableMktDepthResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetDetailedAvailMktDepthErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfAvailabilityInfo",lazy=False)(pname="priceItems", aname="_priceItems", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.GetDetailedAvailableMktDepthResp_Def.__bases__:
                bases = list(bfe.GetDetailedAvailableMktDepthResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.GetDetailedAvailableMktDepthResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetDetailedAvailMktDepthErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetDetailedAvailMktDepthErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AvailabilityInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "AvailabilityInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.AvailabilityInfo_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname="odds", aname="_odds", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="totalAvailableBackAmount", aname="_totalAvailableBackAmount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="totalAvailableLayAmount", aname="_totalAvailableLayAmount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="totalBspBackAmount", aname="_totalBspBackAmount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="totalBspLayAmount", aname="_totalBspLayAmount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._odds = None
                    self._totalAvailableBackAmount = None
                    self._totalAvailableLayAmount = None
                    self._totalBspBackAmount = None
                    self._totalBspLayAmount = None
                    return
            Holder.__name__ = "AvailabilityInfo_Holder"
            self.pyclass = Holder

    class ArrayOfAvailabilityInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfAvailabilityInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfAvailabilityInfo_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","AvailabilityInfo",lazy=False)(pname=(ns,"AvailabilityInfo"), aname="_AvailabilityInfo", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._AvailabilityInfo = []
                    return
            Holder.__name__ = "ArrayOfAvailabilityInfo_Holder"
            self.pyclass = Holder

    class GetDetailedAvailableMktDepthReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetDetailedAvailableMktDepthReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetDetailedAvailableMktDepthReq_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="asianLineId", aname="_asianLineId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="currencyCode", aname="_currencyCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="locale", aname="_locale", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="selectionId", aname="_selectionId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.GetDetailedAvailableMktDepthReq_Def.__bases__:
                bases = list(bfe.GetDetailedAvailableMktDepthReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.GetDetailedAvailableMktDepthReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetMarketTradedVolumeResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetMarketTradedVolumeResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetMarketTradedVolumeResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetMarketTradedVolumeErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfVolumeInfo",lazy=False)(pname="priceItems", aname="_priceItems", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="actualBSP", aname="_actualBSP", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.GetMarketTradedVolumeResp_Def.__bases__:
                bases = list(bfe.GetMarketTradedVolumeResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.GetMarketTradedVolumeResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetMarketTradedVolumeErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetMarketTradedVolumeErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class VolumeInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "VolumeInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.VolumeInfo_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname="odds", aname="_odds", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="totalMatchedAmount", aname="_totalMatchedAmount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="totalBspBackMatchedAmount", aname="_totalBspBackMatchedAmount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="totalBspLiabilityMatchedAmount", aname="_totalBspLiabilityMatchedAmount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._odds = None
                    self._totalMatchedAmount = None
                    self._totalBspBackMatchedAmount = None
                    self._totalBspLiabilityMatchedAmount = None
                    return
            Holder.__name__ = "VolumeInfo_Holder"
            self.pyclass = Holder

    class ArrayOfVolumeInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfVolumeInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfVolumeInfo_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","VolumeInfo",lazy=False)(pname=(ns,"VolumeInfo"), aname="_VolumeInfo", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._VolumeInfo = []
                    return
            Holder.__name__ = "ArrayOfVolumeInfo_Holder"
            self.pyclass = Holder

    class GetMarketTradedVolumeReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetMarketTradedVolumeReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetMarketTradedVolumeReq_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="asianLineId", aname="_asianLineId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="currencyCode", aname="_currencyCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="selectionId", aname="_selectionId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.GetMarketTradedVolumeReq_Def.__bases__:
                bases = list(bfe.GetMarketTradedVolumeReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.GetMarketTradedVolumeReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetBetHistoryResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetBetHistoryResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetBetHistoryResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfBet",lazy=False)(pname="betHistoryItems", aname="_betHistoryItems", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetBetHistoryErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="totalRecordCount", aname="_totalRecordCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.GetBetHistoryResp_Def.__bases__:
                bases = list(bfe.GetBetHistoryResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.GetBetHistoryResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetBetHistoryErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetBetHistoryErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GetBetHistoryReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetBetHistoryReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetBetHistoryReq_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetStatusEnum",lazy=False)(pname="betTypesIncluded", aname="_betTypesIncluded", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="detailed", aname="_detailed", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfInt",lazy=False)(pname="eventTypeIds", aname="_eventTypeIds", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="locale", aname="_locale", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="timezone", aname="_timezone", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfMarketTypeEnum",lazy=False)(pname="marketTypesIncluded", aname="_marketTypesIncluded", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="placedDateFrom", aname="_placedDateFrom", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="placedDateTo", aname="_placedDateTo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="recordCount", aname="_recordCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetsOrderByEnum",lazy=False)(pname="sortBetsBy", aname="_sortBetsBy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="startRecord", aname="_startRecord", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.GetBetHistoryReq_Def.__bases__:
                bases = list(bfe.GetBetHistoryReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.GetBetHistoryReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ArrayOfMarketTypeEnum_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfMarketTypeEnum")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfMarketTypeEnum_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","MarketTypeEnum",lazy=False)(pname=(ns,"MarketTypeEnum"), aname="_MarketTypeEnum", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MarketTypeEnum = []
                    return
            Holder.__name__ = "ArrayOfMarketTypeEnum_Holder"
            self.pyclass = Holder

    class ArrayOfInt_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfInt")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfInt_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"int"), aname="_int", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._int = []
                    return
            Holder.__name__ = "ArrayOfInt_Holder"
            self.pyclass = Holder

    class GetAccountStatementResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetAccountStatementResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetAccountStatementResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetAccountStatementErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfAccountStatementItem",lazy=False)(pname="items", aname="_items", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="totalRecordCount", aname="_totalRecordCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.GetAccountStatementResp_Def.__bases__:
                bases = list(bfe.GetAccountStatementResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.GetAccountStatementResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetAccountStatementErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetAccountStatementErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AccountStatementItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "AccountStatementItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.AccountStatementItem_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname="accountBalance", aname="_accountBalance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="amount", aname="_amount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="avgPrice", aname="_avgPrice", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="betId", aname="_betId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="betSize", aname="_betSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetTypeEnum",lazy=False)(pname="betType", aname="_betType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetCategoryTypeEnum",lazy=False)(pname="betCategoryType", aname="_betCategoryType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="commissionRate", aname="_commissionRate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="eventId", aname="_eventId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="eventTypeId", aname="_eventTypeId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="fullMarketName", aname="_fullMarketName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="grossBetAmount", aname="_grossBetAmount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="marketName", aname="_marketName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","MarketTypeEnum",lazy=False)(pname="marketType", aname="_marketType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="placedDate", aname="_placedDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="selectionId", aname="_selectionId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="selectionName", aname="_selectionName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="settledDate", aname="_settledDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="startDate", aname="_startDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","AccountStatementEnum",lazy=False)(pname="transactionType", aname="_transactionType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="transactionId", aname="_transactionId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","AccountStatementEnum",lazy=False)(pname="winLose", aname="_winLose", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._accountBalance = None
                    self._amount = None
                    self._avgPrice = None
                    self._betId = None
                    self._betSize = None
                    self._betType = None
                    self._betCategoryType = None
                    self._commissionRate = None
                    self._eventId = None
                    self._eventTypeId = None
                    self._fullMarketName = None
                    self._grossBetAmount = None
                    self._marketName = None
                    self._marketType = None
                    self._placedDate = None
                    self._selectionId = None
                    self._selectionName = None
                    self._settledDate = None
                    self._startDate = None
                    self._transactionType = None
                    self._transactionId = None
                    self._winLose = None
                    return
            Holder.__name__ = "AccountStatementItem_Holder"
            self.pyclass = Holder

    class AccountStatementEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "AccountStatementEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ArrayOfAccountStatementItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfAccountStatementItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfAccountStatementItem_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","AccountStatementItem",lazy=False)(pname=(ns,"AccountStatementItem"), aname="_AccountStatementItem", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._AccountStatementItem = []
                    return
            Holder.__name__ = "ArrayOfAccountStatementItem_Holder"
            self.pyclass = Holder

    class GetAccountStatementReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetAccountStatementReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetAccountStatementReq_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname="endDate", aname="_endDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","AccountStatementIncludeEnum",lazy=False)(pname="itemsIncluded", aname="_itemsIncluded", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="ignoreAutoTransfers", aname="_ignoreAutoTransfers", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="recordCount", aname="_recordCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="startDate", aname="_startDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="startRecord", aname="_startRecord", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="locale", aname="_locale", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.GetAccountStatementReq_Def.__bases__:
                bases = list(bfe.GetAccountStatementReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.GetAccountStatementReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AccountStatementIncludeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "AccountStatementIncludeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GetMarketProfitAndLossResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetMarketProfitAndLossResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetMarketProfitAndLossResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfProfitAndLoss",lazy=False)(pname="annotations", aname="_annotations", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="commissionApplied", aname="_commissionApplied", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="currencyCode", aname="_currencyCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetMarketProfitAndLossErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="includesSettledBets", aname="_includesSettledBets", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="includesBspBets", aname="_includesBspBets", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="marketName", aname="_marketName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","MarketStatusEnum",lazy=False)(pname="marketStatus", aname="_marketStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="unit", aname="_unit", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.GetMarketProfitAndLossResp_Def.__bases__:
                bases = list(bfe.GetMarketProfitAndLossResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.GetMarketProfitAndLossResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ProfitAndLoss_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ProfitAndLoss")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ProfitAndLoss_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname="futureIfWin", aname="_futureIfWin", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="ifWin", aname="_ifWin", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="selectionId", aname="_selectionId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="selectionName", aname="_selectionName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="worstcaseIfWin", aname="_worstcaseIfWin", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._futureIfWin = None
                    self._ifWin = None
                    self._selectionId = None
                    self._selectionName = None
                    self._worstcaseIfWin = None
                    return
            Holder.__name__ = "ProfitAndLoss_Holder"
            self.pyclass = Holder

    class ArrayOfProfitAndLoss_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfProfitAndLoss")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfProfitAndLoss_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ProfitAndLoss",lazy=False)(pname=(ns,"ProfitAndLoss"), aname="_ProfitAndLoss", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ProfitAndLoss = []
                    return
            Holder.__name__ = "ArrayOfProfitAndLoss_Holder"
            self.pyclass = Holder

    class GetMarketProfitAndLossErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetMarketProfitAndLossErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GetMarketProfitAndLossReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetMarketProfitAndLossReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetMarketProfitAndLossReq_Def.schema
            TClist = [ZSI.TC.String(pname="locale", aname="_locale", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="includeSettledBets", aname="_includeSettledBets", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="includeBspBets", aname="_includeBspBets", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="marketID", aname="_marketID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="netOfCommission", aname="_netOfCommission", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.GetMarketProfitAndLossReq_Def.__bases__:
                bases = list(bfe.GetMarketProfitAndLossReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.GetMarketProfitAndLossReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetBetResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetBetResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetBetResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","Bet",lazy=False)(pname="bet", aname="_bet", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetBetErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.GetBetResp_Def.__bases__:
                bases = list(bfe.GetBetResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.GetBetResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetBetErrorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetBetErrorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GetBetReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetBetReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetBetReq_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="betId", aname="_betId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="locale", aname="_locale", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.GetBetReq_Def.__bases__:
                bases = list(bfe.GetBetReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.GetBetReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetBetLiteResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetBetLiteResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetBetLiteResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetLite",lazy=False)(pname="betLite", aname="_betLite", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetBetErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.GetBetLiteResp_Def.__bases__:
                bases = list(bfe.GetBetLiteResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.GetBetLiteResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BetLite_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "BetLite")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.BetLite_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="betId", aname="_betId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="matchedSize", aname="_matchedSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="remainingSize", aname="_remainingSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetStatusEnum",lazy=False)(pname="betStatus", aname="_betStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetCategoryTypeEnum",lazy=False)(pname="betCategoryType", aname="_betCategoryType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetPersistenceTypeEnum",lazy=False)(pname="betPersistenceType", aname="_betPersistenceType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="bspLiability", aname="_bspLiability", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._betId = None
                    self._marketId = None
                    self._matchedSize = None
                    self._remainingSize = None
                    self._betStatus = None
                    self._betCategoryType = None
                    self._betPersistenceType = None
                    self._bspLiability = None
                    return
            Holder.__name__ = "BetLite_Holder"
            self.pyclass = Holder

    class ArrayOfBetLite_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfBetLite")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfBetLite_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetLite",lazy=False)(pname=(ns,"BetLite"), aname="_BetLite", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._BetLite = []
                    return
            Holder.__name__ = "ArrayOfBetLite_Holder"
            self.pyclass = Holder

    class GetBetLiteReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetBetLiteReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetBetLiteReq_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="betId", aname="_betId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.GetBetLiteReq_Def.__bases__:
                bases = list(bfe.GetBetLiteReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.GetBetLiteReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetBetMatchesLiteReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetBetMatchesLiteReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetBetMatchesLiteReq_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="betId", aname="_betId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.GetBetMatchesLiteReq_Def.__bases__:
                bases = list(bfe.GetBetMatchesLiteReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.GetBetMatchesLiteReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetBetMatchesLiteResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetBetMatchesLiteResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetBetMatchesLiteResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfMatchLite",lazy=False)(pname="matchLites", aname="_matchLites", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetBetErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.GetBetMatchesLiteResp_Def.__bases__:
                bases = list(bfe.GetBetMatchesLiteResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.GetBetMatchesLiteResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MatchLite_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "MatchLite")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.MatchLite_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetStatusEnum",lazy=False)(pname="betStatus", aname="_betStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="matchedDate", aname="_matchedDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="priceMatched", aname="_priceMatched", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="sizeMatched", aname="_sizeMatched", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="transactionId", aname="_transactionId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._betStatus = None
                    self._matchedDate = None
                    self._priceMatched = None
                    self._sizeMatched = None
                    self._transactionId = None
                    return
            Holder.__name__ = "MatchLite_Holder"
            self.pyclass = Holder

    class ArrayOfMatchLite_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfMatchLite")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfMatchLite_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","MatchLite",lazy=False)(pname=(ns,"MatchLite"), aname="_MatchLite", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MatchLite = []
                    return
            Holder.__name__ = "ArrayOfMatchLite_Holder"
            self.pyclass = Holder

    class GetCurrentBetsLiteResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetCurrentBetsLiteResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetCurrentBetsLiteResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfBetLite",lazy=False)(pname="betLites", aname="_betLites", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetCurrentBetsErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="totalRecordCount", aname="_totalRecordCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.GetCurrentBetsLiteResp_Def.__bases__:
                bases = list(bfe.GetCurrentBetsLiteResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.GetCurrentBetsLiteResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetCurrentBetsLiteReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetCurrentBetsLiteReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetCurrentBetsLiteReq_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetStatusEnum",lazy=False)(pname="betStatus", aname="_betStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetsOrderByEnum",lazy=False)(pname="orderBy", aname="_orderBy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="recordCount", aname="_recordCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="startRecord", aname="_startRecord", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="noTotalRecordCount", aname="_noTotalRecordCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.GetCurrentBetsLiteReq_Def.__bases__:
                bases = list(bfe.GetCurrentBetsLiteReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.GetCurrentBetsLiteReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MUBetLite_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "MUBetLite")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.MUBetLite_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="betId", aname="_betId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="transactionId", aname="_transactionId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="size", aname="_size", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetStatusEnum",lazy=False)(pname="betStatus", aname="_betStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetCategoryTypeEnum",lazy=False)(pname="betCategoryType", aname="_betCategoryType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetPersistenceTypeEnum",lazy=False)(pname="betPersistenceType", aname="_betPersistenceType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="bspLiability", aname="_bspLiability", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._betId = None
                    self._transactionId = None
                    self._marketId = None
                    self._size = None
                    self._betStatus = None
                    self._betCategoryType = None
                    self._betPersistenceType = None
                    self._bspLiability = None
                    return
            Holder.__name__ = "MUBetLite_Holder"
            self.pyclass = Holder

    class ArrayOfMUBetLite_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "ArrayOfMUBetLite")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.ArrayOfMUBetLite_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","MUBetLite",lazy=False)(pname=(ns,"MUBetLite"), aname="_MUBetLite", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MUBetLite = []
                    return
            Holder.__name__ = "ArrayOfMUBetLite_Holder"
            self.pyclass = Holder

    class GetMUBetsLiteResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetMUBetsLiteResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetMUBetsLiteResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfMUBetLite",lazy=False)(pname="betLites", aname="_betLites", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetMUBetsErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="totalRecordCount", aname="_totalRecordCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.GetMUBetsLiteResp_Def.__bases__:
                bases = list(bfe.GetMUBetsLiteResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.GetMUBetsLiteResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetMUBetsLiteReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetMUBetsLiteReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetMUBetsLiteReq_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetStatusEnum",lazy=False)(pname="betStatus", aname="_betStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","ArrayOfBetId",lazy=False)(pname="betIds", aname="_betIds", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","BetsOrderByEnum",lazy=False)(pname="orderBy", aname="_orderBy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","SortOrderEnum",lazy=False)(pname="sortOrder", aname="_sortOrder", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="recordCount", aname="_recordCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="startRecord", aname="_startRecord", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="matchedSince", aname="_matchedSince", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="excludeLastSecond", aname="_excludeLastSecond", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.GetMUBetsLiteReq_Def.__bases__:
                bases = list(bfe.GetMUBetsLiteReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.GetMUBetsLiteReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetMarketInfoResp_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetMarketInfoResp")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetMarketInfoResp_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","GetMarketErrorEnum",lazy=False)(pname="errorCode", aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.betfair.com/publicapi/types/exchange/v5/","MarketLite",lazy=False)(pname="marketLite", aname="_marketLite", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="minorErrorCode", aname="_minorErrorCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIResponse_Def not in bfe.GetMarketInfoResp_Def.__bases__:
                bases = list(bfe.GetMarketInfoResp_Def.__bases__)
                bases.insert(0, bfe.APIResponse_Def)
                bfe.GetMarketInfoResp_Def.__bases__ = tuple(bases)

            bfe.APIResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MarketLite_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "MarketLite")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = bfe.MarketLite_Def.schema
            TClist = [GTD("http://www.betfair.com/publicapi/types/exchange/v5/","MarketStatusEnum",lazy=False)(pname="marketStatus", aname="_marketStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="marketSuspendTime", aname="_marketSuspendTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="marketTime", aname="_marketTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="numberOfRunners", aname="_numberOfRunners", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="delay", aname="_delay", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="reconciled", aname="_reconciled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="openForBspBetting", aname="_openForBspBetting", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._marketStatus = None
                    self._marketSuspendTime = None
                    self._marketTime = None
                    self._numberOfRunners = None
                    self._delay = None
                    self._reconciled = None
                    self._openForBspBetting = None
                    return
            Holder.__name__ = "MarketLite_Holder"
            self.pyclass = Holder

    class GetMarketInfoReq_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "GetMarketInfoReq")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.GetMarketInfoReq_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="marketId", aname="_marketId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.APIRequest_Def not in bfe.GetMarketInfoReq_Def.__bases__:
                bases = list(bfe.GetMarketInfoReq_Def.__bases__)
                bases.insert(0, bfe.APIRequest_Def)
                bfe.GetMarketInfoReq_Def.__bases__ = tuple(bases)

            bfe.APIRequest_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class HandicapLine_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "HandicapLine")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.HandicapLine_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname="from", aname="_from", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="to", aname="_to", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.ProfitAndLoss_Def not in bfe.HandicapLine_Def.__bases__:
                bases = list(bfe.HandicapLine_Def.__bases__)
                bases.insert(0, bfe.ProfitAndLoss_Def)
                bfe.HandicapLine_Def.__bases__ = tuple(bases)

            bfe.ProfitAndLoss_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MultiWinnerOddsLine_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.betfair.com/publicapi/types/exchange/v5/"
        type = (schema, "MultiWinnerOddsLine")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = bfe.MultiWinnerOddsLine_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname="ifLoss", aname="_ifLoss", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if bfe.ProfitAndLoss_Def not in bfe.MultiWinnerOddsLine_Def.__bases__:
                bases = list(bfe.MultiWinnerOddsLine_Def.__bases__)
                bases.insert(0, bfe.ProfitAndLoss_Def)
                bfe.MultiWinnerOddsLine_Def.__bases__ = tuple(bases)

            bfe.ProfitAndLoss_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

# end class bfe (tns: http://www.betfair.com/publicapi/types/exchange/v5/)
